// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { GetApiProfilesError, GetApiProfilesResponse, PostApiProfilesData, PostApiProfilesError, PostApiProfilesResponse, GetApiProfilesByProfileIdData, GetApiProfilesByProfileIdError, GetApiProfilesByProfileIdResponse, PutApiProfilesByProfileIdData, PutApiProfilesByProfileIdError, PutApiProfilesByProfileIdResponse, DeleteApiProfilesByProfileIdData, DeleteApiProfilesByProfileIdError, DeleteApiProfilesByProfileIdResponse, PostApiProfilesByProfileIdJumpstartData, PostApiProfilesByProfileIdJumpstartError, PostApiProfilesByProfileIdJumpstartResponse, PostApiProfilesByProfileIdDryJumpstartData, PostApiProfilesByProfileIdDryJumpstartError, PostApiProfilesByProfileIdDryJumpstartResponse, PostApiDetectionsListData, PostApiDetectionsListError, PostApiDetectionsListResponse, PutApiDetectionsTagsData, PutApiDetectionsTagsError, PutApiDetectionsTagsResponse, PostApiAnalyzeData, PostApiAnalyzeError, PostApiAnalyzeResponse, GetApiSourcesRedditSubredditsError, GetApiSourcesRedditSubredditsResponse, PostApiSourcesRedditSubredditsBySubredditAddProfilesData, PostApiSourcesRedditSubredditsBySubredditAddProfilesError, PostApiSourcesRedditSubredditsBySubredditAddProfilesResponse, PostApiSourcesRedditSubredditsBySubredditRemoveProfilesData, PostApiSourcesRedditSubredditsBySubredditRemoveProfilesError, PostApiSourcesRedditSubredditsBySubredditRemoveProfilesResponse, GetApiSourcesRedditSubredditsWithProfileData, GetApiSourcesRedditSubredditsWithProfileError, GetApiSourcesRedditSubredditsWithProfileResponse, GetApiStatisticsByProfileIdData, GetApiStatisticsByProfileIdError, GetApiStatisticsByProfileIdResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get all profiles
 */
export const getApiProfiles = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProfilesResponse, GetApiProfilesError, ThrowOnError>({
        ...options,
        url: '/api/profiles'
    });
};

/**
 * Create a new profile
 */
export const postApiProfiles = <ThrowOnError extends boolean = false>(options: Options<PostApiProfilesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiProfilesResponse, PostApiProfilesError, ThrowOnError>({
        ...options,
        url: '/api/profiles'
    });
};

/**
 * Get a profile by ID
 */
export const getApiProfilesByProfileId = <ThrowOnError extends boolean = false>(options: Options<GetApiProfilesByProfileIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiProfilesByProfileIdResponse, GetApiProfilesByProfileIdError, ThrowOnError>({
        ...options,
        url: '/api/profiles/{profileId}'
    });
};

/**
 * Update a profile by ID
 */
export const putApiProfilesByProfileId = <ThrowOnError extends boolean = false>(options: Options<PutApiProfilesByProfileIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiProfilesByProfileIdResponse, PutApiProfilesByProfileIdError, ThrowOnError>({
        ...options,
        url: '/api/profiles/{profileId}'
    });
};

/**
 * Delete a profile by ID
 */
export const deleteApiProfilesByProfileId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiProfilesByProfileIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteApiProfilesByProfileIdResponse, DeleteApiProfilesByProfileIdError, ThrowOnError>({
        ...options,
        url: '/api/profiles/{profileId}'
    });
};

/**
 * Jumpstart a profile - run analysis on old posts
 */
export const postApiProfilesByProfileIdJumpstart = <ThrowOnError extends boolean = false>(options: Options<PostApiProfilesByProfileIdJumpstartData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiProfilesByProfileIdJumpstartResponse, PostApiProfilesByProfileIdJumpstartError, ThrowOnError>({
        ...options,
        url: '/api/profiles/{profileId}/jumpstart'
    });
};

/**
 * Dry jumpstart a profile - load tasks to be spawned
 */
export const postApiProfilesByProfileIdDryJumpstart = <ThrowOnError extends boolean = false>(options: Options<PostApiProfilesByProfileIdDryJumpstartData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiProfilesByProfileIdDryJumpstartResponse, PostApiProfilesByProfileIdDryJumpstartError, ThrowOnError>({
        ...options,
        url: '/api/profiles/{profileId}/dry_jumpstart'
    });
};

/**
 * List detections
 */
export const postApiDetectionsList = <ThrowOnError extends boolean = false>(options: Options<PostApiDetectionsListData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiDetectionsListResponse, PostApiDetectionsListError, ThrowOnError>({
        ...options,
        url: '/api/detections/list'
    });
};

/**
 * Detection tag update
 */
export const putApiDetectionsTags = <ThrowOnError extends boolean = false>(options: Options<PutApiDetectionsTagsData, ThrowOnError>) => {
    return (options?.client ?? client).put<PutApiDetectionsTagsResponse, PutApiDetectionsTagsError, ThrowOnError>({
        ...options,
        url: '/api/detections/tags'
    });
};

/**
 * Analyze a post
 */
export const postApiAnalyze = <ThrowOnError extends boolean = false>(options: Options<PostApiAnalyzeData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiAnalyzeResponse, PostApiAnalyzeError, ThrowOnError>({
        ...options,
        url: '/api/analyze'
    });
};

/**
 * Get all subreddits
 */
export const getApiSourcesRedditSubreddits = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiSourcesRedditSubredditsResponse, GetApiSourcesRedditSubredditsError, ThrowOnError>({
        ...options,
        url: '/api/sources/reddit/subreddits'
    });
};

/**
 * Add profiles
 */
export const postApiSourcesRedditSubredditsBySubredditAddProfiles = <ThrowOnError extends boolean = false>(options: Options<PostApiSourcesRedditSubredditsBySubredditAddProfilesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiSourcesRedditSubredditsBySubredditAddProfilesResponse, PostApiSourcesRedditSubredditsBySubredditAddProfilesError, ThrowOnError>({
        ...options,
        url: '/api/sources/reddit/subreddits/{subreddit}/add_profiles'
    });
};

/**
 * Remove profiles
 */
export const postApiSourcesRedditSubredditsBySubredditRemoveProfiles = <ThrowOnError extends boolean = false>(options: Options<PostApiSourcesRedditSubredditsBySubredditRemoveProfilesData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostApiSourcesRedditSubredditsBySubredditRemoveProfilesResponse, PostApiSourcesRedditSubredditsBySubredditRemoveProfilesError, ThrowOnError>({
        ...options,
        url: '/api/sources/reddit/subreddits/{subreddit}/remove_profiles'
    });
};

/**
 * Get all subreddits by profile
 */
export const getApiSourcesRedditSubredditsWithProfile = <ThrowOnError extends boolean = false>(options: Options<GetApiSourcesRedditSubredditsWithProfileData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiSourcesRedditSubredditsWithProfileResponse, GetApiSourcesRedditSubredditsWithProfileError, ThrowOnError>({
        ...options,
        url: '/api/sources/reddit/subreddits_with_profile'
    });
};

/**
 * Get statistics for a profile
 */
export const getApiStatisticsByProfileId = <ThrowOnError extends boolean = false>(options: Options<GetApiStatisticsByProfileIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiStatisticsByProfileIdResponse, GetApiStatisticsByProfileIdError, ThrowOnError>({
        ...options,
        url: '/api/statistics/{profileId}'
    });
};