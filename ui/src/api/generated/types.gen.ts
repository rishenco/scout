// This file is auto-generated by @hey-api/openapi-ts

export type Error = {
    error: string;
};

export type Profile = {
    id: number;
    name: string;
    created_at?: string;
    updated_at?: string;
    default_settings?: ProfileSettings;
    sources_settings?: {
        [key: string]: ProfileSettings;
    };
};

export type ProfileSettings = {
    relevancy_filter: string;
    extracted_properties: {
        [key: string]: (string);
    };
    updated_at?: string;
    created_at?: string;
};

export type ProfileJumpstartRequest = {
    /**
     * Whether to exclude already analyzed posts.
     */
    exclude_already_analyzed?: boolean;
    /**
     * How many days to go back in time to analyze. If null, analyze all posts.
     */
    jumpstart_period?: number;
    /**
     * How many posts to analyze. If null, analyze all posts.
     */
    limit?: number;
};

export type ProfileUpdate = {
    name?: string;
    active?: boolean;
    default_settings?: (ProfileSettingsUpdate) | null;
    sources_settings?: {
        [key: string]: ProfileSettingsUpdate;
    };
};

export type ProfileSettingsUpdate = {
    relevancy_filter?: string;
    extracted_properties?: {
        [key: string]: ((string) | null);
    };
} | null;

export type DetectionListRequest = {
    last_seen_id?: number;
    limit?: number;
    filter?: DetectionFilter;
};

export type DetectionFilter = {
    profiles?: Array<(number)>;
    sources?: Array<(string)>;
    is_relevant?: boolean;
    tags?: DetectionTagsFilter;
};

export type DetectionTagsFilter = {
    relevancy_detected_correctly?: Array<(boolean)>;
};

export type DetectionTags = {
    relevancy_detected_correctly?: boolean;
};

export type DetectionTagUpdateRequest = {
    detection_id: number;
    tags: {
        relevancy_detected_correctly?: (boolean) | null;
    };
};

export type Detection = {
    id: number;
    source: string;
    source_id: string;
    profile_id: number;
    is_relevant: boolean;
    properties: {
        [key: string]: (string);
    };
    created_at: string;
};

export type ListedDetection = {
    detection: Detection;
    source_post?: {
        [key: string]: unknown;
    };
    tags?: DetectionTags;
};

export type AnalyzeRequest = {
    source: string;
    source_id: string;
    relevancy_filter: string;
    extracted_properties: {
        [key: string]: (string);
    };
};

export type SubredditSettings = {
    subreddit: string;
    profiles: Array<(number)>;
};

export type ProfileStatistics = {
    manual_tasks: number;
    auto_tasks: number;
};

export type GetApiProfilesResponse = (Array<Profile>);

export type GetApiProfilesError = (unknown | Error);

export type PostApiProfilesData = {
    body: Profile;
};

export type PostApiProfilesResponse = ({
    id: number;
});

export type PostApiProfilesError = (Error);

export type GetApiProfilesByProfileIdData = {
    path: {
        profileId: number;
    };
};

export type GetApiProfilesByProfileIdResponse = (Profile);

export type GetApiProfilesByProfileIdError = (unknown | Error);

export type PutApiProfilesByProfileIdData = {
    body: ProfileUpdate;
    path: {
        profileId: number;
    };
};

export type PutApiProfilesByProfileIdResponse = (unknown);

export type PutApiProfilesByProfileIdError = (unknown | Error);

export type DeleteApiProfilesByProfileIdData = {
    path: {
        profileId: number;
    };
};

export type DeleteApiProfilesByProfileIdResponse = (void);

export type DeleteApiProfilesByProfileIdError = (unknown | Error);

export type PostApiProfilesByProfileIdJumpstartData = {
    body: ProfileJumpstartRequest;
    path: {
        profileId: number;
    };
};

export type PostApiProfilesByProfileIdJumpstartResponse = (void);

export type PostApiProfilesByProfileIdJumpstartError = (unknown | Error);

export type PostApiDetectionsListData = {
    body: DetectionListRequest;
};

export type PostApiDetectionsListResponse = (Array<ListedDetection>);

export type PostApiDetectionsListError = (unknown | Error);

export type PutApiDetectionsTagsData = {
    body: DetectionTagUpdateRequest;
};

export type PutApiDetectionsTagsResponse = (DetectionTags);

export type PutApiDetectionsTagsError = (unknown | Error);

export type PostApiAnalyzeData = {
    body: AnalyzeRequest;
};

export type PostApiAnalyzeResponse = (Detection);

export type PostApiAnalyzeError = (Error);

export type GetApiSourcesRedditSubredditsResponse = (Array<SubredditSettings>);

export type GetApiSourcesRedditSubredditsError = (unknown | Error);

export type PostApiSourcesRedditSubredditsBySubredditAddProfilesData = {
    body: {
        profile_ids: Array<(number)>;
    };
    path: {
        subreddit: string;
    };
};

export type PostApiSourcesRedditSubredditsBySubredditAddProfilesResponse = (void);

export type PostApiSourcesRedditSubredditsBySubredditAddProfilesError = (unknown | Error);

export type PostApiSourcesRedditSubredditsBySubredditRemoveProfilesData = {
    body: {
        profile_ids: Array<(number)>;
    };
    path: {
        subreddit: string;
    };
};

export type PostApiSourcesRedditSubredditsBySubredditRemoveProfilesResponse = (void);

export type PostApiSourcesRedditSubredditsBySubredditRemoveProfilesError = (unknown | Error);

export type GetApiSourcesRedditSubredditsWithProfileData = {
    query: {
        profile_id: number;
    };
};

export type GetApiSourcesRedditSubredditsWithProfileResponse = (Array<SubredditSettings>);

export type GetApiSourcesRedditSubredditsWithProfileError = (unknown | Error);

export type GetApiStatisticsByProfileIdData = {
    path: {
        profileId: number;
    };
};

export type GetApiStatisticsByProfileIdResponse = (ProfileStatistics);

export type GetApiStatisticsByProfileIdError = (unknown | Error);