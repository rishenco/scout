// This file is auto-generated by @hey-api/openapi-ts

export type _Error = {
    error: string;
};

export type Profile = {
    id: number;
    name: string;
    active: boolean;
    created_at?: string;
    updated_at?: string;
    default_settings?: ProfileSettings;
    sources_settings?: {
        [key: string]: ProfileSettings;
    };
};

export type ProfileSettings = {
    version: number;
    relevancy_filter: string;
    extracted_properties: {
        [key: string]: string;
    };
    updated_at?: string;
    created_at?: string;
};

export type ProfileJumpstartRequest = {
    /**
     * Whether to exclude already analyzed posts.
     */
    exclude_already_analyzed?: boolean;
    /**
     * How many days to go back in time to analyze. If null, analyze all posts.
     */
    jumpstart_period?: number;
    /**
     * How many posts to analyze. If null, analyze all posts.
     */
    limit?: number;
};

export type ProfileUpdate = {
    name?: string;
    active?: boolean;
    default_settings?: ProfileSettingsUpdate;
    sources_settings?: {
        [key: string]: ProfileSettingsUpdate;
    };
};

export type ProfileSettingsUpdate = {
    relevancy_filter?: string;
    extracted_properties?: {
        [key: string]: string | null;
    };
} | null;

export type DetectionListRequest = {
    last_seen_id?: number;
    limit?: number;
    filter?: DetectionFilter;
};

export type DetectionFilter = {
    profiles?: Array<ProfileFilter>;
    sources?: Array<string>;
    is_relevant?: boolean;
    tags?: DetectionTagsFilter;
};

export type ProfileFilter = {
    profile_id: number;
    source_settings_versions: Array<SourceSettingsVersionsFilter>;
};

export type SourceSettingsVersionsFilter = {
    source?: string;
    versions: Array<number>;
};

export type DetectionTagsFilter = {
    relevancy_detected_correctly?: Array<boolean>;
};

export type DetectionTags = {
    relevancy_detected_correctly?: boolean;
};

export type DetectionTagUpdateRequest = {
    detection_id: number;
    tags: {
        relevancy_detected_correctly?: boolean | null;
    };
};

export type Detection = {
    id: number;
    source: string;
    source_id: string;
    profile_id: number;
    settings_version: number;
    is_relevant: boolean;
    properties: {
        [key: string]: string;
    };
    created_at: string;
};

export type ListedDetection = {
    detection: Detection;
    source_post?: {
        [key: string]: unknown;
    };
    tags?: DetectionTags;
};

export type AnalyzeRequest = {
    source: string;
    source_id: string;
    relevancy_filter: string;
    extracted_properties: {
        [key: string]: string;
    };
};

export type SubredditSettings = {
    subreddit: string;
    profiles: Array<number>;
};

export type ProfileStatistics = {
    manual_tasks: number;
    auto_tasks: number;
};

export type GetApiProfilesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/profiles';
};

export type GetApiProfilesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiProfilesError = GetApiProfilesErrors[keyof GetApiProfilesErrors];

export type GetApiProfilesResponses = {
    /**
     * A list of profiles
     */
    200: Array<Profile>;
};

export type GetApiProfilesResponse = GetApiProfilesResponses[keyof GetApiProfilesResponses];

export type PostApiProfilesData = {
    body: Profile;
    path?: never;
    query?: never;
    url: '/api/profiles';
};

export type PostApiProfilesErrors = {
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiProfilesError = PostApiProfilesErrors[keyof PostApiProfilesErrors];

export type PostApiProfilesResponses = {
    /**
     * Profile created successfully
     */
    201: {
        id: number;
    };
};

export type PostApiProfilesResponse = PostApiProfilesResponses[keyof PostApiProfilesResponses];

export type DeleteApiProfilesByProfileIdData = {
    body?: never;
    path: {
        profileId: number;
    };
    query?: never;
    url: '/api/profiles/{profileId}';
};

export type DeleteApiProfilesByProfileIdErrors = {
    /**
     * Profile not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type DeleteApiProfilesByProfileIdError = DeleteApiProfilesByProfileIdErrors[keyof DeleteApiProfilesByProfileIdErrors];

export type DeleteApiProfilesByProfileIdResponses = {
    /**
     * Profile deleted successfully
     */
    204: void;
};

export type DeleteApiProfilesByProfileIdResponse = DeleteApiProfilesByProfileIdResponses[keyof DeleteApiProfilesByProfileIdResponses];

export type GetApiProfilesByProfileIdData = {
    body?: never;
    path: {
        profileId: number;
    };
    query?: never;
    url: '/api/profiles/{profileId}';
};

export type GetApiProfilesByProfileIdErrors = {
    /**
     * Profile not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiProfilesByProfileIdError = GetApiProfilesByProfileIdErrors[keyof GetApiProfilesByProfileIdErrors];

export type GetApiProfilesByProfileIdResponses = {
    /**
     * Profile retrieved successfully
     */
    200: Profile;
};

export type GetApiProfilesByProfileIdResponse = GetApiProfilesByProfileIdResponses[keyof GetApiProfilesByProfileIdResponses];

export type PutApiProfilesByProfileIdData = {
    body: ProfileUpdate;
    path: {
        profileId: number;
    };
    query?: never;
    url: '/api/profiles/{profileId}';
};

export type PutApiProfilesByProfileIdErrors = {
    /**
     * Profile not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PutApiProfilesByProfileIdError = PutApiProfilesByProfileIdErrors[keyof PutApiProfilesByProfileIdErrors];

export type PutApiProfilesByProfileIdResponses = {
    /**
     * Profile updated successfully
     */
    200: unknown;
};

export type PostApiProfilesByProfileIdJumpstartData = {
    body: ProfileJumpstartRequest;
    path: {
        profileId: number;
    };
    query?: never;
    url: '/api/profiles/{profileId}/jumpstart';
};

export type PostApiProfilesByProfileIdJumpstartErrors = {
    /**
     * Profile not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiProfilesByProfileIdJumpstartError = PostApiProfilesByProfileIdJumpstartErrors[keyof PostApiProfilesByProfileIdJumpstartErrors];

export type PostApiProfilesByProfileIdJumpstartResponses = {
    /**
     * Profile jumpstarted successfully
     */
    204: void;
};

export type PostApiProfilesByProfileIdJumpstartResponse = PostApiProfilesByProfileIdJumpstartResponses[keyof PostApiProfilesByProfileIdJumpstartResponses];

export type PostApiDetectionsListData = {
    body: DetectionListRequest;
    path?: never;
    query?: never;
    url: '/api/detections/list';
};

export type PostApiDetectionsListErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiDetectionsListError = PostApiDetectionsListErrors[keyof PostApiDetectionsListErrors];

export type PostApiDetectionsListResponses = {
    /**
     * A list of detections
     */
    200: Array<ListedDetection>;
};

export type PostApiDetectionsListResponse = PostApiDetectionsListResponses[keyof PostApiDetectionsListResponses];

export type PutApiDetectionsTagsData = {
    body: DetectionTagUpdateRequest;
    path?: never;
    query?: never;
    url: '/api/detections/tags';
};

export type PutApiDetectionsTagsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PutApiDetectionsTagsError = PutApiDetectionsTagsErrors[keyof PutApiDetectionsTagsErrors];

export type PutApiDetectionsTagsResponses = {
    /**
     * Detection tag updated successfully
     */
    200: DetectionTags;
};

export type PutApiDetectionsTagsResponse = PutApiDetectionsTagsResponses[keyof PutApiDetectionsTagsResponses];

export type PostApiAnalyzeData = {
    body: AnalyzeRequest;
    path?: never;
    query?: never;
    url: '/api/analyze';
};

export type PostApiAnalyzeErrors = {
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiAnalyzeError = PostApiAnalyzeErrors[keyof PostApiAnalyzeErrors];

export type PostApiAnalyzeResponses = {
    /**
     * Post analyzed successfully
     */
    200: Detection;
};

export type PostApiAnalyzeResponse = PostApiAnalyzeResponses[keyof PostApiAnalyzeResponses];

export type GetApiSourcesRedditSubredditsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/sources/reddit/subreddits';
};

export type GetApiSourcesRedditSubredditsErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiSourcesRedditSubredditsError = GetApiSourcesRedditSubredditsErrors[keyof GetApiSourcesRedditSubredditsErrors];

export type GetApiSourcesRedditSubredditsResponses = {
    /**
     * A list of subreddits
     */
    200: Array<SubredditSettings>;
};

export type GetApiSourcesRedditSubredditsResponse = GetApiSourcesRedditSubredditsResponses[keyof GetApiSourcesRedditSubredditsResponses];

export type PostApiSourcesRedditSubredditsBySubredditAddProfilesData = {
    body: {
        profile_ids: Array<number>;
    };
    path: {
        subreddit: string;
    };
    query?: never;
    url: '/api/sources/reddit/subreddits/{subreddit}/add_profiles';
};

export type PostApiSourcesRedditSubredditsBySubredditAddProfilesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Profile not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiSourcesRedditSubredditsBySubredditAddProfilesError = PostApiSourcesRedditSubredditsBySubredditAddProfilesErrors[keyof PostApiSourcesRedditSubredditsBySubredditAddProfilesErrors];

export type PostApiSourcesRedditSubredditsBySubredditAddProfilesResponses = {
    /**
     * Profiles added successfully
     */
    204: void;
};

export type PostApiSourcesRedditSubredditsBySubredditAddProfilesResponse = PostApiSourcesRedditSubredditsBySubredditAddProfilesResponses[keyof PostApiSourcesRedditSubredditsBySubredditAddProfilesResponses];

export type PostApiSourcesRedditSubredditsBySubredditRemoveProfilesData = {
    body: {
        profile_ids: Array<number>;
    };
    path: {
        subreddit: string;
    };
    query?: never;
    url: '/api/sources/reddit/subreddits/{subreddit}/remove_profiles';
};

export type PostApiSourcesRedditSubredditsBySubredditRemoveProfilesErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Profile not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type PostApiSourcesRedditSubredditsBySubredditRemoveProfilesError = PostApiSourcesRedditSubredditsBySubredditRemoveProfilesErrors[keyof PostApiSourcesRedditSubredditsBySubredditRemoveProfilesErrors];

export type PostApiSourcesRedditSubredditsBySubredditRemoveProfilesResponses = {
    /**
     * Profiles removed successfully
     */
    204: void;
};

export type PostApiSourcesRedditSubredditsBySubredditRemoveProfilesResponse = PostApiSourcesRedditSubredditsBySubredditRemoveProfilesResponses[keyof PostApiSourcesRedditSubredditsBySubredditRemoveProfilesResponses];

export type GetApiSourcesRedditSubredditsWithProfileData = {
    body?: never;
    path?: never;
    query: {
        profile_id: number;
    };
    url: '/api/sources/reddit/subreddits_with_profile';
};

export type GetApiSourcesRedditSubredditsWithProfileErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiSourcesRedditSubredditsWithProfileError = GetApiSourcesRedditSubredditsWithProfileErrors[keyof GetApiSourcesRedditSubredditsWithProfileErrors];

export type GetApiSourcesRedditSubredditsWithProfileResponses = {
    /**
     * A list of subreddits
     */
    200: Array<SubredditSettings>;
};

export type GetApiSourcesRedditSubredditsWithProfileResponse = GetApiSourcesRedditSubredditsWithProfileResponses[keyof GetApiSourcesRedditSubredditsWithProfileResponses];

export type GetApiStatisticsByProfileIdData = {
    body?: never;
    path: {
        profileId: number;
    };
    query?: never;
    url: '/api/statistics/{profileId}';
};

export type GetApiStatisticsByProfileIdErrors = {
    /**
     * Unauthorized
     */
    401: unknown;
    /**
     * Profile not found
     */
    404: unknown;
    /**
     * Internal server error
     */
    500: _Error;
};

export type GetApiStatisticsByProfileIdError = GetApiStatisticsByProfileIdErrors[keyof GetApiStatisticsByProfileIdErrors];

export type GetApiStatisticsByProfileIdResponses = {
    /**
     * Statistics retrieved successfully
     */
    200: ProfileStatistics;
};

export type GetApiStatisticsByProfileIdResponse = GetApiStatisticsByProfileIdResponses[keyof GetApiStatisticsByProfileIdResponses];

export type ClientOptions = {
    baseURL: 'http://localhost:5601' | (string & {});
};