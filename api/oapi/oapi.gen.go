// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// AnalysisTaskParameters defines model for AnalysisTaskParameters.
type AnalysisTaskParameters struct {
	ProfileId  int    `json:"profile_id"`
	ShouldSave bool   `json:"should_save"`
	Source     string `json:"source"`
	SourceId   string `json:"source_id"`
}

// AnalyzeRequest defines model for AnalyzeRequest.
type AnalyzeRequest struct {
	ExtractedProperties map[string]string `json:"extracted_properties"`
	RelevancyFilter     string            `json:"relevancy_filter"`
	Source              string            `json:"source"`
	SourceId            string            `json:"source_id"`
}

// Detection defines model for Detection.
type Detection struct {
	CreatedAt       string            `json:"created_at"`
	Id              int               `json:"id"`
	IsRelevant      bool              `json:"is_relevant"`
	ProfileId       int               `json:"profile_id"`
	Properties      map[string]string `json:"properties"`
	SettingsVersion int               `json:"settings_version"`
	Source          string            `json:"source"`
	SourceId        string            `json:"source_id"`
}

// DetectionFilter defines model for DetectionFilter.
type DetectionFilter struct {
	IsRelevant *bool                `json:"is_relevant,omitempty"`
	Profiles   *[]ProfileFilter     `json:"profiles,omitempty"`
	Sources    *[]string            `json:"sources,omitempty"`
	Tags       *DetectionTagsFilter `json:"tags,omitempty"`
}

// DetectionListRequest defines model for DetectionListRequest.
type DetectionListRequest struct {
	Filter     *DetectionFilter `json:"filter,omitempty"`
	LastSeenId *int             `json:"last_seen_id,omitempty"`
	Limit      *int             `json:"limit,omitempty"`
}

// DetectionTagUpdateRequest defines model for DetectionTagUpdateRequest.
type DetectionTagUpdateRequest struct {
	DetectionId int `json:"detection_id"`
	Tags        struct {
		RelevancyDetectedCorrectly nullable.Nullable[bool] `json:"relevancy_detected_correctly,omitempty"`
	} `json:"tags"`
}

// DetectionTags defines model for DetectionTags.
type DetectionTags struct {
	RelevancyDetectedCorrectly *bool `json:"relevancy_detected_correctly,omitempty"`
}

// DetectionTagsFilter defines model for DetectionTagsFilter.
type DetectionTagsFilter struct {
	RelevancyDetectedCorrectly *[]*bool `json:"relevancy_detected_correctly,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// ListedDetection defines model for ListedDetection.
type ListedDetection struct {
	Detection  Detection        `json:"detection"`
	SourcePost *json.RawMessage `json:"source_post,omitempty"`
	Tags       *DetectionTags   `json:"tags,omitempty"`
}

// Profile defines model for Profile.
type Profile struct {
	Active          bool                        `json:"active"`
	CreatedAt       *string                     `json:"created_at,omitempty"`
	DefaultSettings *ProfileSettings            `json:"default_settings,omitempty"`
	Id              int                         `json:"id"`
	Name            string                      `json:"name"`
	SourcesSettings *map[string]ProfileSettings `json:"sources_settings,omitempty"`
	UpdatedAt       *string                     `json:"updated_at,omitempty"`
}

// ProfileFilter defines model for ProfileFilter.
type ProfileFilter struct {
	ProfileId              int                            `json:"profile_id"`
	SourceSettingsVersions []SourceSettingsVersionsFilter `json:"source_settings_versions"`
}

// ProfileJumpstartRequest defines model for ProfileJumpstartRequest.
type ProfileJumpstartRequest struct {
	// ExcludeAlreadyAnalyzed Whether to exclude already analyzed posts.
	ExcludeAlreadyAnalyzed *bool `json:"exclude_already_analyzed,omitempty"`

	// JumpstartPeriod How many days to go back in time to analyze. If null, analyze all posts.
	JumpstartPeriod *int `json:"jumpstart_period,omitempty"`

	// Limit How many posts to analyze. If null, analyze all posts.
	Limit *int `json:"limit,omitempty"`
}

// ProfileSettings defines model for ProfileSettings.
type ProfileSettings struct {
	CreatedAt           *string           `json:"created_at,omitempty"`
	ExtractedProperties map[string]string `json:"extracted_properties"`
	RelevancyFilter     string            `json:"relevancy_filter"`
	UpdatedAt           *string           `json:"updated_at,omitempty"`
	Version             int               `json:"version"`
}

// ProfileSettingsUpdate defines model for ProfileSettingsUpdate.
type ProfileSettingsUpdate struct {
	ExtractedProperties *map[string]*string `json:"extracted_properties,omitempty"`
	RelevancyFilter     *string             `json:"relevancy_filter,omitempty"`
}

// ProfileStatistics defines model for ProfileStatistics.
type ProfileStatistics struct {
	AutoTasks   int `json:"auto_tasks"`
	ManualTasks int `json:"manual_tasks"`
}

// ProfileUpdate defines model for ProfileUpdate.
type ProfileUpdate struct {
	Active          *bool                                    `json:"active,omitempty"`
	DefaultSettings nullable.Nullable[ProfileSettingsUpdate] `json:"default_settings,omitempty"`
	Name            *string                                  `json:"name,omitempty"`
	SourcesSettings *map[string]*ProfileSettingsUpdate       `json:"sources_settings,omitempty"`
}

// SourceSettingsVersionsFilter defines model for SourceSettingsVersionsFilter.
type SourceSettingsVersionsFilter struct {
	Source   *string `json:"source,omitempty"`
	Versions []int   `json:"versions"`
}

// SubredditSettings defines model for SubredditSettings.
type SubredditSettings struct {
	Profiles  []int  `json:"profiles"`
	Subreddit string `json:"subreddit"`
}

// PostApiSourcesRedditSubredditsSubredditAddProfilesJSONBody defines parameters for PostApiSourcesRedditSubredditsSubredditAddProfiles.
type PostApiSourcesRedditSubredditsSubredditAddProfilesJSONBody struct {
	ProfileIds []int `json:"profile_ids"`
}

// PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONBody defines parameters for PostApiSourcesRedditSubredditsSubredditRemoveProfiles.
type PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONBody struct {
	ProfileIds []int `json:"profile_ids"`
}

// GetApiSourcesRedditSubredditsWithProfileParams defines parameters for GetApiSourcesRedditSubredditsWithProfile.
type GetApiSourcesRedditSubredditsWithProfileParams struct {
	ProfileId int `form:"profile_id" json:"profile_id"`
}

// PostApiAnalyzeJSONRequestBody defines body for PostApiAnalyze for application/json ContentType.
type PostApiAnalyzeJSONRequestBody = AnalyzeRequest

// PostApiDetectionsListJSONRequestBody defines body for PostApiDetectionsList for application/json ContentType.
type PostApiDetectionsListJSONRequestBody = DetectionListRequest

// PutApiDetectionsTagsJSONRequestBody defines body for PutApiDetectionsTags for application/json ContentType.
type PutApiDetectionsTagsJSONRequestBody = DetectionTagUpdateRequest

// PostApiProfilesJSONRequestBody defines body for PostApiProfiles for application/json ContentType.
type PostApiProfilesJSONRequestBody = Profile

// PutApiProfilesProfileIdJSONRequestBody defines body for PutApiProfilesProfileId for application/json ContentType.
type PutApiProfilesProfileIdJSONRequestBody = ProfileUpdate

// PostApiProfilesProfileIdDryJumpstartJSONRequestBody defines body for PostApiProfilesProfileIdDryJumpstart for application/json ContentType.
type PostApiProfilesProfileIdDryJumpstartJSONRequestBody = ProfileJumpstartRequest

// PostApiProfilesProfileIdJumpstartJSONRequestBody defines body for PostApiProfilesProfileIdJumpstart for application/json ContentType.
type PostApiProfilesProfileIdJumpstartJSONRequestBody = ProfileJumpstartRequest

// PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody defines body for PostApiSourcesRedditSubredditsSubredditAddProfiles for application/json ContentType.
type PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody PostApiSourcesRedditSubredditsSubredditAddProfilesJSONBody

// PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody defines body for PostApiSourcesRedditSubredditsSubredditRemoveProfiles for application/json ContentType.
type PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiAnalyzeWithBody request with any body
	PostApiAnalyzeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAnalyze(ctx context.Context, body PostApiAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDetectionsListWithBody request with any body
	PostApiDetectionsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiDetectionsList(ctx context.Context, body PostApiDetectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDetectionsTagsWithBody request with any body
	PutApiDetectionsTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDetectionsTags(ctx context.Context, body PutApiDetectionsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProfiles request
	GetApiProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiProfilesWithBody request with any body
	PostApiProfilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiProfiles(ctx context.Context, body PostApiProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiProfilesProfileId request
	DeleteApiProfilesProfileId(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProfilesProfileId request
	GetApiProfilesProfileId(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiProfilesProfileIdWithBody request with any body
	PutApiProfilesProfileIdWithBody(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiProfilesProfileId(ctx context.Context, profileId int, body PutApiProfilesProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiProfilesProfileIdDryJumpstartWithBody request with any body
	PostApiProfilesProfileIdDryJumpstartWithBody(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiProfilesProfileIdDryJumpstart(ctx context.Context, profileId int, body PostApiProfilesProfileIdDryJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiProfilesProfileIdJumpstartWithBody request with any body
	PostApiProfilesProfileIdJumpstartWithBody(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiProfilesProfileIdJumpstart(ctx context.Context, profileId int, body PostApiProfilesProfileIdJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSourcesRedditSubreddits request
	GetApiSourcesRedditSubreddits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSourcesRedditSubredditsSubredditAddProfilesWithBody request with any body
	PostApiSourcesRedditSubredditsSubredditAddProfilesWithBody(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBody request with any body
	PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBody(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSourcesRedditSubredditsWithProfile request
	GetApiSourcesRedditSubredditsWithProfile(ctx context.Context, params *GetApiSourcesRedditSubredditsWithProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiStatisticsProfileId request
	GetApiStatisticsProfileId(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiAnalyzeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAnalyzeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAnalyze(ctx context.Context, body PostApiAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAnalyzeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDetectionsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDetectionsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDetectionsList(ctx context.Context, body PostApiDetectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDetectionsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDetectionsTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDetectionsTagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDetectionsTags(ctx context.Context, body PutApiDetectionsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDetectionsTagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProfilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfiles(ctx context.Context, body PostApiProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiProfilesProfileId(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiProfilesProfileIdRequest(c.Server, profileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProfilesProfileId(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProfilesProfileIdRequest(c.Server, profileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiProfilesProfileIdWithBody(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiProfilesProfileIdRequestWithBody(c.Server, profileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiProfilesProfileId(ctx context.Context, profileId int, body PutApiProfilesProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiProfilesProfileIdRequest(c.Server, profileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfilesProfileIdDryJumpstartWithBody(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesProfileIdDryJumpstartRequestWithBody(c.Server, profileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfilesProfileIdDryJumpstart(ctx context.Context, profileId int, body PostApiProfilesProfileIdDryJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesProfileIdDryJumpstartRequest(c.Server, profileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfilesProfileIdJumpstartWithBody(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesProfileIdJumpstartRequestWithBody(c.Server, profileId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfilesProfileIdJumpstart(ctx context.Context, profileId int, body PostApiProfilesProfileIdJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesProfileIdJumpstartRequest(c.Server, profileId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSourcesRedditSubreddits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSourcesRedditSubredditsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSourcesRedditSubredditsSubredditAddProfilesWithBody(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequestWithBody(c.Server, subreddit, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequest(c.Server, subreddit, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBody(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestWithBody(c.Server, subreddit, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequest(c.Server, subreddit, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSourcesRedditSubredditsWithProfile(ctx context.Context, params *GetApiSourcesRedditSubredditsWithProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSourcesRedditSubredditsWithProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiStatisticsProfileId(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiStatisticsProfileIdRequest(c.Server, profileId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiAnalyzeRequest calls the generic PostApiAnalyze builder with application/json body
func NewPostApiAnalyzeRequest(server string, body PostApiAnalyzeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAnalyzeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAnalyzeRequestWithBody generates requests for PostApiAnalyze with any type of body
func NewPostApiAnalyzeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/analyze")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiDetectionsListRequest calls the generic PostApiDetectionsList builder with application/json body
func NewPostApiDetectionsListRequest(server string, body PostApiDetectionsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiDetectionsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiDetectionsListRequestWithBody generates requests for PostApiDetectionsList with any type of body
func NewPostApiDetectionsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiDetectionsTagsRequest calls the generic PutApiDetectionsTags builder with application/json body
func NewPutApiDetectionsTagsRequest(server string, body PutApiDetectionsTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDetectionsTagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiDetectionsTagsRequestWithBody generates requests for PutApiDetectionsTags with any type of body
func NewPutApiDetectionsTagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiProfilesRequest generates requests for GetApiProfiles
func NewGetApiProfilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiProfilesRequest calls the generic PostApiProfiles builder with application/json body
func NewPostApiProfilesRequest(server string, body PostApiProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiProfilesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiProfilesRequestWithBody generates requests for PostApiProfiles with any type of body
func NewPostApiProfilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiProfilesProfileIdRequest generates requests for DeleteApiProfilesProfileId
func NewDeleteApiProfilesProfileIdRequest(server string, profileId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProfilesProfileIdRequest generates requests for GetApiProfilesProfileId
func NewGetApiProfilesProfileIdRequest(server string, profileId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiProfilesProfileIdRequest calls the generic PutApiProfilesProfileId builder with application/json body
func NewPutApiProfilesProfileIdRequest(server string, profileId int, body PutApiProfilesProfileIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiProfilesProfileIdRequestWithBody(server, profileId, "application/json", bodyReader)
}

// NewPutApiProfilesProfileIdRequestWithBody generates requests for PutApiProfilesProfileId with any type of body
func NewPutApiProfilesProfileIdRequestWithBody(server string, profileId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiProfilesProfileIdDryJumpstartRequest calls the generic PostApiProfilesProfileIdDryJumpstart builder with application/json body
func NewPostApiProfilesProfileIdDryJumpstartRequest(server string, profileId int, body PostApiProfilesProfileIdDryJumpstartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiProfilesProfileIdDryJumpstartRequestWithBody(server, profileId, "application/json", bodyReader)
}

// NewPostApiProfilesProfileIdDryJumpstartRequestWithBody generates requests for PostApiProfilesProfileIdDryJumpstart with any type of body
func NewPostApiProfilesProfileIdDryJumpstartRequestWithBody(server string, profileId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/dry_jumpstart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiProfilesProfileIdJumpstartRequest calls the generic PostApiProfilesProfileIdJumpstart builder with application/json body
func NewPostApiProfilesProfileIdJumpstartRequest(server string, profileId int, body PostApiProfilesProfileIdJumpstartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiProfilesProfileIdJumpstartRequestWithBody(server, profileId, "application/json", bodyReader)
}

// NewPostApiProfilesProfileIdJumpstartRequestWithBody generates requests for PostApiProfilesProfileIdJumpstart with any type of body
func NewPostApiProfilesProfileIdJumpstartRequestWithBody(server string, profileId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/jumpstart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSourcesRedditSubredditsRequest generates requests for GetApiSourcesRedditSubreddits
func NewGetApiSourcesRedditSubredditsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/reddit/subreddits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequest calls the generic PostApiSourcesRedditSubredditsSubredditAddProfiles builder with application/json body
func NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequest(server string, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequestWithBody(server, subreddit, "application/json", bodyReader)
}

// NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequestWithBody generates requests for PostApiSourcesRedditSubredditsSubredditAddProfiles with any type of body
func NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequestWithBody(server string, subreddit string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subreddit", runtime.ParamLocationPath, subreddit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/reddit/subreddits/%s/add_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequest calls the generic PostApiSourcesRedditSubredditsSubredditRemoveProfiles builder with application/json body
func NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequest(server string, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestWithBody(server, subreddit, "application/json", bodyReader)
}

// NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestWithBody generates requests for PostApiSourcesRedditSubredditsSubredditRemoveProfiles with any type of body
func NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestWithBody(server string, subreddit string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subreddit", runtime.ParamLocationPath, subreddit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/reddit/subreddits/%s/remove_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSourcesRedditSubredditsWithProfileRequest generates requests for GetApiSourcesRedditSubredditsWithProfile
func NewGetApiSourcesRedditSubredditsWithProfileRequest(server string, params *GetApiSourcesRedditSubredditsWithProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/reddit/subreddits_with_profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "profile_id", runtime.ParamLocationQuery, params.ProfileId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiStatisticsProfileIdRequest generates requests for GetApiStatisticsProfileId
func NewGetApiStatisticsProfileIdRequest(server string, profileId int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "profileId", runtime.ParamLocationPath, profileId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/statistics/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiAnalyzeWithBodyWithResponse request with any body
	PostApiAnalyzeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAnalyzeResponse, error)

	PostApiAnalyzeWithResponse(ctx context.Context, body PostApiAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAnalyzeResponse, error)

	// PostApiDetectionsListWithBodyWithResponse request with any body
	PostApiDetectionsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDetectionsListResponse, error)

	PostApiDetectionsListWithResponse(ctx context.Context, body PostApiDetectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDetectionsListResponse, error)

	// PutApiDetectionsTagsWithBodyWithResponse request with any body
	PutApiDetectionsTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDetectionsTagsResponse, error)

	PutApiDetectionsTagsWithResponse(ctx context.Context, body PutApiDetectionsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDetectionsTagsResponse, error)

	// GetApiProfilesWithResponse request
	GetApiProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiProfilesResponse, error)

	// PostApiProfilesWithBodyWithResponse request with any body
	PostApiProfilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesResponse, error)

	PostApiProfilesWithResponse(ctx context.Context, body PostApiProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesResponse, error)

	// DeleteApiProfilesProfileIdWithResponse request
	DeleteApiProfilesProfileIdWithResponse(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*DeleteApiProfilesProfileIdResponse, error)

	// GetApiProfilesProfileIdWithResponse request
	GetApiProfilesProfileIdWithResponse(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*GetApiProfilesProfileIdResponse, error)

	// PutApiProfilesProfileIdWithBodyWithResponse request with any body
	PutApiProfilesProfileIdWithBodyWithResponse(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiProfilesProfileIdResponse, error)

	PutApiProfilesProfileIdWithResponse(ctx context.Context, profileId int, body PutApiProfilesProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiProfilesProfileIdResponse, error)

	// PostApiProfilesProfileIdDryJumpstartWithBodyWithResponse request with any body
	PostApiProfilesProfileIdDryJumpstartWithBodyWithResponse(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesProfileIdDryJumpstartResponse, error)

	PostApiProfilesProfileIdDryJumpstartWithResponse(ctx context.Context, profileId int, body PostApiProfilesProfileIdDryJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesProfileIdDryJumpstartResponse, error)

	// PostApiProfilesProfileIdJumpstartWithBodyWithResponse request with any body
	PostApiProfilesProfileIdJumpstartWithBodyWithResponse(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesProfileIdJumpstartResponse, error)

	PostApiProfilesProfileIdJumpstartWithResponse(ctx context.Context, profileId int, body PostApiProfilesProfileIdJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesProfileIdJumpstartResponse, error)

	// GetApiSourcesRedditSubredditsWithResponse request
	GetApiSourcesRedditSubredditsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSourcesRedditSubredditsResponse, error)

	// PostApiSourcesRedditSubredditsSubredditAddProfilesWithBodyWithResponse request with any body
	PostApiSourcesRedditSubredditsSubredditAddProfilesWithBodyWithResponse(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error)

	PostApiSourcesRedditSubredditsSubredditAddProfilesWithResponse(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error)

	// PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBodyWithResponse request with any body
	PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBodyWithResponse(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error)

	PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithResponse(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error)

	// GetApiSourcesRedditSubredditsWithProfileWithResponse request
	GetApiSourcesRedditSubredditsWithProfileWithResponse(ctx context.Context, params *GetApiSourcesRedditSubredditsWithProfileParams, reqEditors ...RequestEditorFn) (*GetApiSourcesRedditSubredditsWithProfileResponse, error)

	// GetApiStatisticsProfileIdWithResponse request
	GetApiStatisticsProfileIdWithResponse(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*GetApiStatisticsProfileIdResponse, error)
}

type PostApiAnalyzeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Detection
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiAnalyzeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAnalyzeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDetectionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ListedDetection
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiDetectionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDetectionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDetectionsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DetectionTags
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PutApiDetectionsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDetectionsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Profile
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id int `json:"id"`
	}
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PostApiProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiProfilesProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiProfilesProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiProfilesProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProfilesProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Profile
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiProfilesProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProfilesProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiProfilesProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PutApiProfilesProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiProfilesProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiProfilesProfileIdDryJumpstartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]AnalysisTaskParameters
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiProfilesProfileIdDryJumpstartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiProfilesProfileIdDryJumpstartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiProfilesProfileIdJumpstartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiProfilesProfileIdJumpstartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiProfilesProfileIdJumpstartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSourcesRedditSubredditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SubredditSettings
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiSourcesRedditSubredditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSourcesRedditSubredditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSourcesRedditSubredditsSubredditAddProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiSourcesRedditSubredditsSubredditAddProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSourcesRedditSubredditsSubredditAddProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSourcesRedditSubredditsWithProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SubredditSettings
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiSourcesRedditSubredditsWithProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSourcesRedditSubredditsWithProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiStatisticsProfileIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProfileStatistics
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiStatisticsProfileIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiStatisticsProfileIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiAnalyzeWithBodyWithResponse request with arbitrary body returning *PostApiAnalyzeResponse
func (c *ClientWithResponses) PostApiAnalyzeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAnalyzeResponse, error) {
	rsp, err := c.PostApiAnalyzeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAnalyzeResponse(rsp)
}

func (c *ClientWithResponses) PostApiAnalyzeWithResponse(ctx context.Context, body PostApiAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAnalyzeResponse, error) {
	rsp, err := c.PostApiAnalyze(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAnalyzeResponse(rsp)
}

// PostApiDetectionsListWithBodyWithResponse request with arbitrary body returning *PostApiDetectionsListResponse
func (c *ClientWithResponses) PostApiDetectionsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDetectionsListResponse, error) {
	rsp, err := c.PostApiDetectionsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDetectionsListResponse(rsp)
}

func (c *ClientWithResponses) PostApiDetectionsListWithResponse(ctx context.Context, body PostApiDetectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDetectionsListResponse, error) {
	rsp, err := c.PostApiDetectionsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDetectionsListResponse(rsp)
}

// PutApiDetectionsTagsWithBodyWithResponse request with arbitrary body returning *PutApiDetectionsTagsResponse
func (c *ClientWithResponses) PutApiDetectionsTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDetectionsTagsResponse, error) {
	rsp, err := c.PutApiDetectionsTagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDetectionsTagsResponse(rsp)
}

func (c *ClientWithResponses) PutApiDetectionsTagsWithResponse(ctx context.Context, body PutApiDetectionsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDetectionsTagsResponse, error) {
	rsp, err := c.PutApiDetectionsTags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDetectionsTagsResponse(rsp)
}

// GetApiProfilesWithResponse request returning *GetApiProfilesResponse
func (c *ClientWithResponses) GetApiProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiProfilesResponse, error) {
	rsp, err := c.GetApiProfiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProfilesResponse(rsp)
}

// PostApiProfilesWithBodyWithResponse request with arbitrary body returning *PostApiProfilesResponse
func (c *ClientWithResponses) PostApiProfilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesResponse, error) {
	rsp, err := c.PostApiProfilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesResponse(rsp)
}

func (c *ClientWithResponses) PostApiProfilesWithResponse(ctx context.Context, body PostApiProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesResponse, error) {
	rsp, err := c.PostApiProfiles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesResponse(rsp)
}

// DeleteApiProfilesProfileIdWithResponse request returning *DeleteApiProfilesProfileIdResponse
func (c *ClientWithResponses) DeleteApiProfilesProfileIdWithResponse(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*DeleteApiProfilesProfileIdResponse, error) {
	rsp, err := c.DeleteApiProfilesProfileId(ctx, profileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiProfilesProfileIdResponse(rsp)
}

// GetApiProfilesProfileIdWithResponse request returning *GetApiProfilesProfileIdResponse
func (c *ClientWithResponses) GetApiProfilesProfileIdWithResponse(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*GetApiProfilesProfileIdResponse, error) {
	rsp, err := c.GetApiProfilesProfileId(ctx, profileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProfilesProfileIdResponse(rsp)
}

// PutApiProfilesProfileIdWithBodyWithResponse request with arbitrary body returning *PutApiProfilesProfileIdResponse
func (c *ClientWithResponses) PutApiProfilesProfileIdWithBodyWithResponse(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiProfilesProfileIdResponse, error) {
	rsp, err := c.PutApiProfilesProfileIdWithBody(ctx, profileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiProfilesProfileIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiProfilesProfileIdWithResponse(ctx context.Context, profileId int, body PutApiProfilesProfileIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiProfilesProfileIdResponse, error) {
	rsp, err := c.PutApiProfilesProfileId(ctx, profileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiProfilesProfileIdResponse(rsp)
}

// PostApiProfilesProfileIdDryJumpstartWithBodyWithResponse request with arbitrary body returning *PostApiProfilesProfileIdDryJumpstartResponse
func (c *ClientWithResponses) PostApiProfilesProfileIdDryJumpstartWithBodyWithResponse(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesProfileIdDryJumpstartResponse, error) {
	rsp, err := c.PostApiProfilesProfileIdDryJumpstartWithBody(ctx, profileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesProfileIdDryJumpstartResponse(rsp)
}

func (c *ClientWithResponses) PostApiProfilesProfileIdDryJumpstartWithResponse(ctx context.Context, profileId int, body PostApiProfilesProfileIdDryJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesProfileIdDryJumpstartResponse, error) {
	rsp, err := c.PostApiProfilesProfileIdDryJumpstart(ctx, profileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesProfileIdDryJumpstartResponse(rsp)
}

// PostApiProfilesProfileIdJumpstartWithBodyWithResponse request with arbitrary body returning *PostApiProfilesProfileIdJumpstartResponse
func (c *ClientWithResponses) PostApiProfilesProfileIdJumpstartWithBodyWithResponse(ctx context.Context, profileId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesProfileIdJumpstartResponse, error) {
	rsp, err := c.PostApiProfilesProfileIdJumpstartWithBody(ctx, profileId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesProfileIdJumpstartResponse(rsp)
}

func (c *ClientWithResponses) PostApiProfilesProfileIdJumpstartWithResponse(ctx context.Context, profileId int, body PostApiProfilesProfileIdJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesProfileIdJumpstartResponse, error) {
	rsp, err := c.PostApiProfilesProfileIdJumpstart(ctx, profileId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesProfileIdJumpstartResponse(rsp)
}

// GetApiSourcesRedditSubredditsWithResponse request returning *GetApiSourcesRedditSubredditsResponse
func (c *ClientWithResponses) GetApiSourcesRedditSubredditsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSourcesRedditSubredditsResponse, error) {
	rsp, err := c.GetApiSourcesRedditSubreddits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSourcesRedditSubredditsResponse(rsp)
}

// PostApiSourcesRedditSubredditsSubredditAddProfilesWithBodyWithResponse request with arbitrary body returning *PostApiSourcesRedditSubredditsSubredditAddProfilesResponse
func (c *ClientWithResponses) PostApiSourcesRedditSubredditsSubredditAddProfilesWithBodyWithResponse(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error) {
	rsp, err := c.PostApiSourcesRedditSubredditsSubredditAddProfilesWithBody(ctx, subreddit, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSourcesRedditSubredditsSubredditAddProfilesResponse(rsp)
}

func (c *ClientWithResponses) PostApiSourcesRedditSubredditsSubredditAddProfilesWithResponse(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error) {
	rsp, err := c.PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx, subreddit, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSourcesRedditSubredditsSubredditAddProfilesResponse(rsp)
}

// PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBodyWithResponse request with arbitrary body returning *PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse
func (c *ClientWithResponses) PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBodyWithResponse(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error) {
	rsp, err := c.PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBody(ctx, subreddit, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(rsp)
}

func (c *ClientWithResponses) PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithResponse(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error) {
	rsp, err := c.PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx, subreddit, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(rsp)
}

// GetApiSourcesRedditSubredditsWithProfileWithResponse request returning *GetApiSourcesRedditSubredditsWithProfileResponse
func (c *ClientWithResponses) GetApiSourcesRedditSubredditsWithProfileWithResponse(ctx context.Context, params *GetApiSourcesRedditSubredditsWithProfileParams, reqEditors ...RequestEditorFn) (*GetApiSourcesRedditSubredditsWithProfileResponse, error) {
	rsp, err := c.GetApiSourcesRedditSubredditsWithProfile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSourcesRedditSubredditsWithProfileResponse(rsp)
}

// GetApiStatisticsProfileIdWithResponse request returning *GetApiStatisticsProfileIdResponse
func (c *ClientWithResponses) GetApiStatisticsProfileIdWithResponse(ctx context.Context, profileId int, reqEditors ...RequestEditorFn) (*GetApiStatisticsProfileIdResponse, error) {
	rsp, err := c.GetApiStatisticsProfileId(ctx, profileId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiStatisticsProfileIdResponse(rsp)
}

// ParsePostApiAnalyzeResponse parses an HTTP response from a PostApiAnalyzeWithResponse call
func ParsePostApiAnalyzeResponse(rsp *http.Response) (*PostApiAnalyzeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAnalyzeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Detection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiDetectionsListResponse parses an HTTP response from a PostApiDetectionsListWithResponse call
func ParsePostApiDetectionsListResponse(rsp *http.Response) (*PostApiDetectionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDetectionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ListedDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiDetectionsTagsResponse parses an HTTP response from a PutApiDetectionsTagsWithResponse call
func ParsePutApiDetectionsTagsResponse(rsp *http.Response) (*PutApiDetectionsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDetectionsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DetectionTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiProfilesResponse parses an HTTP response from a GetApiProfilesWithResponse call
func ParseGetApiProfilesResponse(rsp *http.Response) (*GetApiProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiProfilesResponse parses an HTTP response from a PostApiProfilesWithResponse call
func ParsePostApiProfilesResponse(rsp *http.Response) (*PostApiProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id int `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiProfilesProfileIdResponse parses an HTTP response from a DeleteApiProfilesProfileIdWithResponse call
func ParseDeleteApiProfilesProfileIdResponse(rsp *http.Response) (*DeleteApiProfilesProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiProfilesProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiProfilesProfileIdResponse parses an HTTP response from a GetApiProfilesProfileIdWithResponse call
func ParseGetApiProfilesProfileIdResponse(rsp *http.Response) (*GetApiProfilesProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProfilesProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiProfilesProfileIdResponse parses an HTTP response from a PutApiProfilesProfileIdWithResponse call
func ParsePutApiProfilesProfileIdResponse(rsp *http.Response) (*PutApiProfilesProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiProfilesProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiProfilesProfileIdDryJumpstartResponse parses an HTTP response from a PostApiProfilesProfileIdDryJumpstartWithResponse call
func ParsePostApiProfilesProfileIdDryJumpstartResponse(rsp *http.Response) (*PostApiProfilesProfileIdDryJumpstartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiProfilesProfileIdDryJumpstartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []AnalysisTaskParameters
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiProfilesProfileIdJumpstartResponse parses an HTTP response from a PostApiProfilesProfileIdJumpstartWithResponse call
func ParsePostApiProfilesProfileIdJumpstartResponse(rsp *http.Response) (*PostApiProfilesProfileIdJumpstartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiProfilesProfileIdJumpstartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiSourcesRedditSubredditsResponse parses an HTTP response from a GetApiSourcesRedditSubredditsWithResponse call
func ParseGetApiSourcesRedditSubredditsResponse(rsp *http.Response) (*GetApiSourcesRedditSubredditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSourcesRedditSubredditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubredditSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiSourcesRedditSubredditsSubredditAddProfilesResponse parses an HTTP response from a PostApiSourcesRedditSubredditsSubredditAddProfilesWithResponse call
func ParsePostApiSourcesRedditSubredditsSubredditAddProfilesResponse(rsp *http.Response) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSourcesRedditSubredditsSubredditAddProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse parses an HTTP response from a PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithResponse call
func ParsePostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(rsp *http.Response) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiSourcesRedditSubredditsWithProfileResponse parses an HTTP response from a GetApiSourcesRedditSubredditsWithProfileWithResponse call
func ParseGetApiSourcesRedditSubredditsWithProfileResponse(rsp *http.Response) (*GetApiSourcesRedditSubredditsWithProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSourcesRedditSubredditsWithProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubredditSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiStatisticsProfileIdResponse parses an HTTP response from a GetApiStatisticsProfileIdWithResponse call
func ParseGetApiStatisticsProfileIdResponse(rsp *http.Response) (*GetApiStatisticsProfileIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiStatisticsProfileIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProfileStatistics
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Analyze a post
	// (POST /api/analyze)
	PostApiAnalyze(c *gin.Context)
	// List detections
	// (POST /api/detections/list)
	PostApiDetectionsList(c *gin.Context)
	// Detection tag update
	// (PUT /api/detections/tags)
	PutApiDetectionsTags(c *gin.Context)
	// Get all profiles
	// (GET /api/profiles)
	GetApiProfiles(c *gin.Context)
	// Create a new profile
	// (POST /api/profiles)
	PostApiProfiles(c *gin.Context)
	// Delete a profile by ID
	// (DELETE /api/profiles/{profileId})
	DeleteApiProfilesProfileId(c *gin.Context, profileId int)
	// Get a profile by ID
	// (GET /api/profiles/{profileId})
	GetApiProfilesProfileId(c *gin.Context, profileId int)
	// Update a profile by ID
	// (PUT /api/profiles/{profileId})
	PutApiProfilesProfileId(c *gin.Context, profileId int)
	// Dry jumpstart a profile - load tasks to be spawned
	// (POST /api/profiles/{profileId}/dry_jumpstart)
	PostApiProfilesProfileIdDryJumpstart(c *gin.Context, profileId int)
	// Jumpstart a profile - run analysis on old posts
	// (POST /api/profiles/{profileId}/jumpstart)
	PostApiProfilesProfileIdJumpstart(c *gin.Context, profileId int)
	// Get all subreddits
	// (GET /api/sources/reddit/subreddits)
	GetApiSourcesRedditSubreddits(c *gin.Context)
	// Add profiles
	// (POST /api/sources/reddit/subreddits/{subreddit}/add_profiles)
	PostApiSourcesRedditSubredditsSubredditAddProfiles(c *gin.Context, subreddit string)
	// Remove profiles
	// (POST /api/sources/reddit/subreddits/{subreddit}/remove_profiles)
	PostApiSourcesRedditSubredditsSubredditRemoveProfiles(c *gin.Context, subreddit string)
	// Get all subreddits by profile
	// (GET /api/sources/reddit/subreddits_with_profile)
	GetApiSourcesRedditSubredditsWithProfile(c *gin.Context, params GetApiSourcesRedditSubredditsWithProfileParams)
	// Get statistics for a profile
	// (GET /api/statistics/{profileId})
	GetApiStatisticsProfileId(c *gin.Context, profileId int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiAnalyze operation middleware
func (siw *ServerInterfaceWrapper) PostApiAnalyze(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAnalyze(c)
}

// PostApiDetectionsList operation middleware
func (siw *ServerInterfaceWrapper) PostApiDetectionsList(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiDetectionsList(c)
}

// PutApiDetectionsTags operation middleware
func (siw *ServerInterfaceWrapper) PutApiDetectionsTags(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiDetectionsTags(c)
}

// GetApiProfiles operation middleware
func (siw *ServerInterfaceWrapper) GetApiProfiles(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiProfiles(c)
}

// PostApiProfiles operation middleware
func (siw *ServerInterfaceWrapper) PostApiProfiles(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiProfiles(c)
}

// DeleteApiProfilesProfileId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiProfilesProfileId(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileId" -------------
	var profileId int

	err = runtime.BindStyledParameterWithOptions("simple", "profileId", c.Param("profileId"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiProfilesProfileId(c, profileId)
}

// GetApiProfilesProfileId operation middleware
func (siw *ServerInterfaceWrapper) GetApiProfilesProfileId(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileId" -------------
	var profileId int

	err = runtime.BindStyledParameterWithOptions("simple", "profileId", c.Param("profileId"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiProfilesProfileId(c, profileId)
}

// PutApiProfilesProfileId operation middleware
func (siw *ServerInterfaceWrapper) PutApiProfilesProfileId(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileId" -------------
	var profileId int

	err = runtime.BindStyledParameterWithOptions("simple", "profileId", c.Param("profileId"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiProfilesProfileId(c, profileId)
}

// PostApiProfilesProfileIdDryJumpstart operation middleware
func (siw *ServerInterfaceWrapper) PostApiProfilesProfileIdDryJumpstart(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileId" -------------
	var profileId int

	err = runtime.BindStyledParameterWithOptions("simple", "profileId", c.Param("profileId"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiProfilesProfileIdDryJumpstart(c, profileId)
}

// PostApiProfilesProfileIdJumpstart operation middleware
func (siw *ServerInterfaceWrapper) PostApiProfilesProfileIdJumpstart(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileId" -------------
	var profileId int

	err = runtime.BindStyledParameterWithOptions("simple", "profileId", c.Param("profileId"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiProfilesProfileIdJumpstart(c, profileId)
}

// GetApiSourcesRedditSubreddits operation middleware
func (siw *ServerInterfaceWrapper) GetApiSourcesRedditSubreddits(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiSourcesRedditSubreddits(c)
}

// PostApiSourcesRedditSubredditsSubredditAddProfiles operation middleware
func (siw *ServerInterfaceWrapper) PostApiSourcesRedditSubredditsSubredditAddProfiles(c *gin.Context) {

	var err error

	// ------------- Path parameter "subreddit" -------------
	var subreddit string

	err = runtime.BindStyledParameterWithOptions("simple", "subreddit", c.Param("subreddit"), &subreddit, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subreddit: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiSourcesRedditSubredditsSubredditAddProfiles(c, subreddit)
}

// PostApiSourcesRedditSubredditsSubredditRemoveProfiles operation middleware
func (siw *ServerInterfaceWrapper) PostApiSourcesRedditSubredditsSubredditRemoveProfiles(c *gin.Context) {

	var err error

	// ------------- Path parameter "subreddit" -------------
	var subreddit string

	err = runtime.BindStyledParameterWithOptions("simple", "subreddit", c.Param("subreddit"), &subreddit, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subreddit: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiSourcesRedditSubredditsSubredditRemoveProfiles(c, subreddit)
}

// GetApiSourcesRedditSubredditsWithProfile operation middleware
func (siw *ServerInterfaceWrapper) GetApiSourcesRedditSubredditsWithProfile(c *gin.Context) {

	var err error

	c.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiSourcesRedditSubredditsWithProfileParams

	// ------------- Required query parameter "profile_id" -------------

	if paramValue := c.Query("profile_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument profile_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "profile_id", c.Request.URL.Query(), &params.ProfileId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profile_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiSourcesRedditSubredditsWithProfile(c, params)
}

// GetApiStatisticsProfileId operation middleware
func (siw *ServerInterfaceWrapper) GetApiStatisticsProfileId(c *gin.Context) {

	var err error

	// ------------- Path parameter "profileId" -------------
	var profileId int

	err = runtime.BindStyledParameterWithOptions("simple", "profileId", c.Param("profileId"), &profileId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profileId: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiStatisticsProfileId(c, profileId)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/analyze", wrapper.PostApiAnalyze)
	router.POST(options.BaseURL+"/api/detections/list", wrapper.PostApiDetectionsList)
	router.PUT(options.BaseURL+"/api/detections/tags", wrapper.PutApiDetectionsTags)
	router.GET(options.BaseURL+"/api/profiles", wrapper.GetApiProfiles)
	router.POST(options.BaseURL+"/api/profiles", wrapper.PostApiProfiles)
	router.DELETE(options.BaseURL+"/api/profiles/:profileId", wrapper.DeleteApiProfilesProfileId)
	router.GET(options.BaseURL+"/api/profiles/:profileId", wrapper.GetApiProfilesProfileId)
	router.PUT(options.BaseURL+"/api/profiles/:profileId", wrapper.PutApiProfilesProfileId)
	router.POST(options.BaseURL+"/api/profiles/:profileId/dry_jumpstart", wrapper.PostApiProfilesProfileIdDryJumpstart)
	router.POST(options.BaseURL+"/api/profiles/:profileId/jumpstart", wrapper.PostApiProfilesProfileIdJumpstart)
	router.GET(options.BaseURL+"/api/sources/reddit/subreddits", wrapper.GetApiSourcesRedditSubreddits)
	router.POST(options.BaseURL+"/api/sources/reddit/subreddits/:subreddit/add_profiles", wrapper.PostApiSourcesRedditSubredditsSubredditAddProfiles)
	router.POST(options.BaseURL+"/api/sources/reddit/subreddits/:subreddit/remove_profiles", wrapper.PostApiSourcesRedditSubredditsSubredditRemoveProfiles)
	router.GET(options.BaseURL+"/api/sources/reddit/subreddits_with_profile", wrapper.GetApiSourcesRedditSubredditsWithProfile)
	router.GET(options.BaseURL+"/api/statistics/:profileId", wrapper.GetApiStatisticsProfileId)
}

type PostApiAnalyzeRequestObject struct {
	Body *PostApiAnalyzeJSONRequestBody
}

type PostApiAnalyzeResponseObject interface {
	VisitPostApiAnalyzeResponse(w http.ResponseWriter) error
}

type PostApiAnalyze200JSONResponse Detection

func (response PostApiAnalyze200JSONResponse) VisitPostApiAnalyzeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAnalyze500JSONResponse Error

func (response PostApiAnalyze500JSONResponse) VisitPostApiAnalyzeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiDetectionsListRequestObject struct {
	Body *PostApiDetectionsListJSONRequestBody
}

type PostApiDetectionsListResponseObject interface {
	VisitPostApiDetectionsListResponse(w http.ResponseWriter) error
}

type PostApiDetectionsList200JSONResponse []ListedDetection

func (response PostApiDetectionsList200JSONResponse) VisitPostApiDetectionsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiDetectionsList401Response struct {
}

func (response PostApiDetectionsList401Response) VisitPostApiDetectionsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiDetectionsList500JSONResponse Error

func (response PostApiDetectionsList500JSONResponse) VisitPostApiDetectionsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutApiDetectionsTagsRequestObject struct {
	Body *PutApiDetectionsTagsJSONRequestBody
}

type PutApiDetectionsTagsResponseObject interface {
	VisitPutApiDetectionsTagsResponse(w http.ResponseWriter) error
}

type PutApiDetectionsTags200JSONResponse DetectionTags

func (response PutApiDetectionsTags200JSONResponse) VisitPutApiDetectionsTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiDetectionsTags401Response struct {
}

func (response PutApiDetectionsTags401Response) VisitPutApiDetectionsTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutApiDetectionsTags500JSONResponse Error

func (response PutApiDetectionsTags500JSONResponse) VisitPutApiDetectionsTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfilesRequestObject struct {
}

type GetApiProfilesResponseObject interface {
	VisitGetApiProfilesResponse(w http.ResponseWriter) error
}

type GetApiProfiles200JSONResponse []Profile

func (response GetApiProfiles200JSONResponse) VisitGetApiProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfiles401Response struct {
}

func (response GetApiProfiles401Response) VisitGetApiProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiProfiles500JSONResponse Error

func (response GetApiProfiles500JSONResponse) VisitGetApiProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfilesRequestObject struct {
	Body *PostApiProfilesJSONRequestBody
}

type PostApiProfilesResponseObject interface {
	VisitPostApiProfilesResponse(w http.ResponseWriter) error
}

type PostApiProfiles201JSONResponse struct {
	Id int `json:"id"`
}

func (response PostApiProfiles201JSONResponse) VisitPostApiProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfiles500JSONResponse Error

func (response PostApiProfiles500JSONResponse) VisitPostApiProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiProfilesProfileIdRequestObject struct {
	ProfileId int `json:"profileId"`
}

type DeleteApiProfilesProfileIdResponseObject interface {
	VisitDeleteApiProfilesProfileIdResponse(w http.ResponseWriter) error
}

type DeleteApiProfilesProfileId204Response struct {
}

func (response DeleteApiProfilesProfileId204Response) VisitDeleteApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiProfilesProfileId404Response struct {
}

func (response DeleteApiProfilesProfileId404Response) VisitDeleteApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteApiProfilesProfileId500JSONResponse Error

func (response DeleteApiProfilesProfileId500JSONResponse) VisitDeleteApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfilesProfileIdRequestObject struct {
	ProfileId int `json:"profileId"`
}

type GetApiProfilesProfileIdResponseObject interface {
	VisitGetApiProfilesProfileIdResponse(w http.ResponseWriter) error
}

type GetApiProfilesProfileId200JSONResponse Profile

func (response GetApiProfilesProfileId200JSONResponse) VisitGetApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfilesProfileId404Response struct {
}

func (response GetApiProfilesProfileId404Response) VisitGetApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetApiProfilesProfileId500JSONResponse Error

func (response GetApiProfilesProfileId500JSONResponse) VisitGetApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutApiProfilesProfileIdRequestObject struct {
	ProfileId int `json:"profileId"`
	Body      *PutApiProfilesProfileIdJSONRequestBody
}

type PutApiProfilesProfileIdResponseObject interface {
	VisitPutApiProfilesProfileIdResponse(w http.ResponseWriter) error
}

type PutApiProfilesProfileId200Response struct {
}

func (response PutApiProfilesProfileId200Response) VisitPutApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutApiProfilesProfileId404Response struct {
}

func (response PutApiProfilesProfileId404Response) VisitPutApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutApiProfilesProfileId500JSONResponse Error

func (response PutApiProfilesProfileId500JSONResponse) VisitPutApiProfilesProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfilesProfileIdDryJumpstartRequestObject struct {
	ProfileId int `json:"profileId"`
	Body      *PostApiProfilesProfileIdDryJumpstartJSONRequestBody
}

type PostApiProfilesProfileIdDryJumpstartResponseObject interface {
	VisitPostApiProfilesProfileIdDryJumpstartResponse(w http.ResponseWriter) error
}

type PostApiProfilesProfileIdDryJumpstart200JSONResponse []AnalysisTaskParameters

func (response PostApiProfilesProfileIdDryJumpstart200JSONResponse) VisitPostApiProfilesProfileIdDryJumpstartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfilesProfileIdDryJumpstart404Response struct {
}

func (response PostApiProfilesProfileIdDryJumpstart404Response) VisitPostApiProfilesProfileIdDryJumpstartResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiProfilesProfileIdDryJumpstart500JSONResponse Error

func (response PostApiProfilesProfileIdDryJumpstart500JSONResponse) VisitPostApiProfilesProfileIdDryJumpstartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfilesProfileIdJumpstartRequestObject struct {
	ProfileId int `json:"profileId"`
	Body      *PostApiProfilesProfileIdJumpstartJSONRequestBody
}

type PostApiProfilesProfileIdJumpstartResponseObject interface {
	VisitPostApiProfilesProfileIdJumpstartResponse(w http.ResponseWriter) error
}

type PostApiProfilesProfileIdJumpstart204Response struct {
}

func (response PostApiProfilesProfileIdJumpstart204Response) VisitPostApiProfilesProfileIdJumpstartResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostApiProfilesProfileIdJumpstart404Response struct {
}

func (response PostApiProfilesProfileIdJumpstart404Response) VisitPostApiProfilesProfileIdJumpstartResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiProfilesProfileIdJumpstart500JSONResponse Error

func (response PostApiProfilesProfileIdJumpstart500JSONResponse) VisitPostApiProfilesProfileIdJumpstartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSourcesRedditSubredditsRequestObject struct {
}

type GetApiSourcesRedditSubredditsResponseObject interface {
	VisitGetApiSourcesRedditSubredditsResponse(w http.ResponseWriter) error
}

type GetApiSourcesRedditSubreddits200JSONResponse []SubredditSettings

func (response GetApiSourcesRedditSubreddits200JSONResponse) VisitGetApiSourcesRedditSubredditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSourcesRedditSubreddits401Response struct {
}

func (response GetApiSourcesRedditSubreddits401Response) VisitGetApiSourcesRedditSubredditsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiSourcesRedditSubreddits500JSONResponse Error

func (response GetApiSourcesRedditSubreddits500JSONResponse) VisitGetApiSourcesRedditSubredditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSourcesRedditSubredditsSubredditAddProfilesRequestObject struct {
	Subreddit string `json:"subreddit"`
	Body      *PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody
}

type PostApiSourcesRedditSubredditsSubredditAddProfilesResponseObject interface {
	VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error
}

type PostApiSourcesRedditSubredditsSubredditAddProfiles204Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditAddProfiles204Response) VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditAddProfiles401Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditAddProfiles401Response) VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditAddProfiles404Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditAddProfiles404Response) VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditAddProfiles500JSONResponse Error

func (response PostApiSourcesRedditSubredditsSubredditAddProfiles500JSONResponse) VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestObject struct {
	Subreddit string `json:"subreddit"`
	Body      *PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponseObject interface {
	VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfiles204Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditRemoveProfiles204Response) VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfiles401Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditRemoveProfiles401Response) VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfiles404Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditRemoveProfiles404Response) VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfiles500JSONResponse Error

func (response PostApiSourcesRedditSubredditsSubredditRemoveProfiles500JSONResponse) VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSourcesRedditSubredditsWithProfileRequestObject struct {
	Params GetApiSourcesRedditSubredditsWithProfileParams
}

type GetApiSourcesRedditSubredditsWithProfileResponseObject interface {
	VisitGetApiSourcesRedditSubredditsWithProfileResponse(w http.ResponseWriter) error
}

type GetApiSourcesRedditSubredditsWithProfile200JSONResponse []SubredditSettings

func (response GetApiSourcesRedditSubredditsWithProfile200JSONResponse) VisitGetApiSourcesRedditSubredditsWithProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSourcesRedditSubredditsWithProfile401Response struct {
}

func (response GetApiSourcesRedditSubredditsWithProfile401Response) VisitGetApiSourcesRedditSubredditsWithProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiSourcesRedditSubredditsWithProfile500JSONResponse Error

func (response GetApiSourcesRedditSubredditsWithProfile500JSONResponse) VisitGetApiSourcesRedditSubredditsWithProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiStatisticsProfileIdRequestObject struct {
	ProfileId int `json:"profileId"`
}

type GetApiStatisticsProfileIdResponseObject interface {
	VisitGetApiStatisticsProfileIdResponse(w http.ResponseWriter) error
}

type GetApiStatisticsProfileId200JSONResponse ProfileStatistics

func (response GetApiStatisticsProfileId200JSONResponse) VisitGetApiStatisticsProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiStatisticsProfileId401Response struct {
}

func (response GetApiStatisticsProfileId401Response) VisitGetApiStatisticsProfileIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiStatisticsProfileId404Response struct {
}

func (response GetApiStatisticsProfileId404Response) VisitGetApiStatisticsProfileIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetApiStatisticsProfileId500JSONResponse Error

func (response GetApiStatisticsProfileId500JSONResponse) VisitGetApiStatisticsProfileIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Analyze a post
	// (POST /api/analyze)
	PostApiAnalyze(ctx context.Context, request PostApiAnalyzeRequestObject) (PostApiAnalyzeResponseObject, error)
	// List detections
	// (POST /api/detections/list)
	PostApiDetectionsList(ctx context.Context, request PostApiDetectionsListRequestObject) (PostApiDetectionsListResponseObject, error)
	// Detection tag update
	// (PUT /api/detections/tags)
	PutApiDetectionsTags(ctx context.Context, request PutApiDetectionsTagsRequestObject) (PutApiDetectionsTagsResponseObject, error)
	// Get all profiles
	// (GET /api/profiles)
	GetApiProfiles(ctx context.Context, request GetApiProfilesRequestObject) (GetApiProfilesResponseObject, error)
	// Create a new profile
	// (POST /api/profiles)
	PostApiProfiles(ctx context.Context, request PostApiProfilesRequestObject) (PostApiProfilesResponseObject, error)
	// Delete a profile by ID
	// (DELETE /api/profiles/{profileId})
	DeleteApiProfilesProfileId(ctx context.Context, request DeleteApiProfilesProfileIdRequestObject) (DeleteApiProfilesProfileIdResponseObject, error)
	// Get a profile by ID
	// (GET /api/profiles/{profileId})
	GetApiProfilesProfileId(ctx context.Context, request GetApiProfilesProfileIdRequestObject) (GetApiProfilesProfileIdResponseObject, error)
	// Update a profile by ID
	// (PUT /api/profiles/{profileId})
	PutApiProfilesProfileId(ctx context.Context, request PutApiProfilesProfileIdRequestObject) (PutApiProfilesProfileIdResponseObject, error)
	// Dry jumpstart a profile - load tasks to be spawned
	// (POST /api/profiles/{profileId}/dry_jumpstart)
	PostApiProfilesProfileIdDryJumpstart(ctx context.Context, request PostApiProfilesProfileIdDryJumpstartRequestObject) (PostApiProfilesProfileIdDryJumpstartResponseObject, error)
	// Jumpstart a profile - run analysis on old posts
	// (POST /api/profiles/{profileId}/jumpstart)
	PostApiProfilesProfileIdJumpstart(ctx context.Context, request PostApiProfilesProfileIdJumpstartRequestObject) (PostApiProfilesProfileIdJumpstartResponseObject, error)
	// Get all subreddits
	// (GET /api/sources/reddit/subreddits)
	GetApiSourcesRedditSubreddits(ctx context.Context, request GetApiSourcesRedditSubredditsRequestObject) (GetApiSourcesRedditSubredditsResponseObject, error)
	// Add profiles
	// (POST /api/sources/reddit/subreddits/{subreddit}/add_profiles)
	PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx context.Context, request PostApiSourcesRedditSubredditsSubredditAddProfilesRequestObject) (PostApiSourcesRedditSubredditsSubredditAddProfilesResponseObject, error)
	// Remove profiles
	// (POST /api/sources/reddit/subreddits/{subreddit}/remove_profiles)
	PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx context.Context, request PostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestObject) (PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponseObject, error)
	// Get all subreddits by profile
	// (GET /api/sources/reddit/subreddits_with_profile)
	GetApiSourcesRedditSubredditsWithProfile(ctx context.Context, request GetApiSourcesRedditSubredditsWithProfileRequestObject) (GetApiSourcesRedditSubredditsWithProfileResponseObject, error)
	// Get statistics for a profile
	// (GET /api/statistics/{profileId})
	GetApiStatisticsProfileId(ctx context.Context, request GetApiStatisticsProfileIdRequestObject) (GetApiStatisticsProfileIdResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiAnalyze operation middleware
func (sh *strictHandler) PostApiAnalyze(ctx *gin.Context) {
	var request PostApiAnalyzeRequestObject

	var body PostApiAnalyzeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAnalyze(ctx, request.(PostApiAnalyzeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAnalyze")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAnalyzeResponseObject); ok {
		if err := validResponse.VisitPostApiAnalyzeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiDetectionsList operation middleware
func (sh *strictHandler) PostApiDetectionsList(ctx *gin.Context) {
	var request PostApiDetectionsListRequestObject

	var body PostApiDetectionsListJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiDetectionsList(ctx, request.(PostApiDetectionsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiDetectionsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiDetectionsListResponseObject); ok {
		if err := validResponse.VisitPostApiDetectionsListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiDetectionsTags operation middleware
func (sh *strictHandler) PutApiDetectionsTags(ctx *gin.Context) {
	var request PutApiDetectionsTagsRequestObject

	var body PutApiDetectionsTagsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiDetectionsTags(ctx, request.(PutApiDetectionsTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiDetectionsTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiDetectionsTagsResponseObject); ok {
		if err := validResponse.VisitPutApiDetectionsTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiProfiles operation middleware
func (sh *strictHandler) GetApiProfiles(ctx *gin.Context) {
	var request GetApiProfilesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiProfiles(ctx, request.(GetApiProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiProfiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiProfilesResponseObject); ok {
		if err := validResponse.VisitGetApiProfilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiProfiles operation middleware
func (sh *strictHandler) PostApiProfiles(ctx *gin.Context) {
	var request PostApiProfilesRequestObject

	var body PostApiProfilesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiProfiles(ctx, request.(PostApiProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiProfiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiProfilesResponseObject); ok {
		if err := validResponse.VisitPostApiProfilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiProfilesProfileId operation middleware
func (sh *strictHandler) DeleteApiProfilesProfileId(ctx *gin.Context, profileId int) {
	var request DeleteApiProfilesProfileIdRequestObject

	request.ProfileId = profileId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiProfilesProfileId(ctx, request.(DeleteApiProfilesProfileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiProfilesProfileId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiProfilesProfileIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiProfilesProfileIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiProfilesProfileId operation middleware
func (sh *strictHandler) GetApiProfilesProfileId(ctx *gin.Context, profileId int) {
	var request GetApiProfilesProfileIdRequestObject

	request.ProfileId = profileId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiProfilesProfileId(ctx, request.(GetApiProfilesProfileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiProfilesProfileId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiProfilesProfileIdResponseObject); ok {
		if err := validResponse.VisitGetApiProfilesProfileIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiProfilesProfileId operation middleware
func (sh *strictHandler) PutApiProfilesProfileId(ctx *gin.Context, profileId int) {
	var request PutApiProfilesProfileIdRequestObject

	request.ProfileId = profileId

	var body PutApiProfilesProfileIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiProfilesProfileId(ctx, request.(PutApiProfilesProfileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiProfilesProfileId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiProfilesProfileIdResponseObject); ok {
		if err := validResponse.VisitPutApiProfilesProfileIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiProfilesProfileIdDryJumpstart operation middleware
func (sh *strictHandler) PostApiProfilesProfileIdDryJumpstart(ctx *gin.Context, profileId int) {
	var request PostApiProfilesProfileIdDryJumpstartRequestObject

	request.ProfileId = profileId

	var body PostApiProfilesProfileIdDryJumpstartJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiProfilesProfileIdDryJumpstart(ctx, request.(PostApiProfilesProfileIdDryJumpstartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiProfilesProfileIdDryJumpstart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiProfilesProfileIdDryJumpstartResponseObject); ok {
		if err := validResponse.VisitPostApiProfilesProfileIdDryJumpstartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiProfilesProfileIdJumpstart operation middleware
func (sh *strictHandler) PostApiProfilesProfileIdJumpstart(ctx *gin.Context, profileId int) {
	var request PostApiProfilesProfileIdJumpstartRequestObject

	request.ProfileId = profileId

	var body PostApiProfilesProfileIdJumpstartJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiProfilesProfileIdJumpstart(ctx, request.(PostApiProfilesProfileIdJumpstartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiProfilesProfileIdJumpstart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiProfilesProfileIdJumpstartResponseObject); ok {
		if err := validResponse.VisitPostApiProfilesProfileIdJumpstartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiSourcesRedditSubreddits operation middleware
func (sh *strictHandler) GetApiSourcesRedditSubreddits(ctx *gin.Context) {
	var request GetApiSourcesRedditSubredditsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSourcesRedditSubreddits(ctx, request.(GetApiSourcesRedditSubredditsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSourcesRedditSubreddits")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiSourcesRedditSubredditsResponseObject); ok {
		if err := validResponse.VisitGetApiSourcesRedditSubredditsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSourcesRedditSubredditsSubredditAddProfiles operation middleware
func (sh *strictHandler) PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx *gin.Context, subreddit string) {
	var request PostApiSourcesRedditSubredditsSubredditAddProfilesRequestObject

	request.Subreddit = subreddit

	var body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx, request.(PostApiSourcesRedditSubredditsSubredditAddProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSourcesRedditSubredditsSubredditAddProfiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiSourcesRedditSubredditsSubredditAddProfilesResponseObject); ok {
		if err := validResponse.VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSourcesRedditSubredditsSubredditRemoveProfiles operation middleware
func (sh *strictHandler) PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx *gin.Context, subreddit string) {
	var request PostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestObject

	request.Subreddit = subreddit

	var body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx, request.(PostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSourcesRedditSubredditsSubredditRemoveProfiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponseObject); ok {
		if err := validResponse.VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiSourcesRedditSubredditsWithProfile operation middleware
func (sh *strictHandler) GetApiSourcesRedditSubredditsWithProfile(ctx *gin.Context, params GetApiSourcesRedditSubredditsWithProfileParams) {
	var request GetApiSourcesRedditSubredditsWithProfileRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSourcesRedditSubredditsWithProfile(ctx, request.(GetApiSourcesRedditSubredditsWithProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSourcesRedditSubredditsWithProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiSourcesRedditSubredditsWithProfileResponseObject); ok {
		if err := validResponse.VisitGetApiSourcesRedditSubredditsWithProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiStatisticsProfileId operation middleware
func (sh *strictHandler) GetApiStatisticsProfileId(ctx *gin.Context, profileId int) {
	var request GetApiStatisticsProfileIdRequestObject

	request.ProfileId = profileId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiStatisticsProfileId(ctx, request.(GetApiStatisticsProfileIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiStatisticsProfileId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiStatisticsProfileIdResponseObject); ok {
		if err := validResponse.VisitGetApiStatisticsProfileIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW2/bvhX/KgS3p0GNnbXdg9/SZetSbECQtOtDFxi0eGyzpUmVpJJ6gb/7H6Som0lJ",
	"dpxLk/bNliie24+/c5FucSpXmRQgjMaTW6zTJayI+3kiCF9rpj8S/e2cKLICA8rdyZTMQBkG5b854zBl",
	"1P4z6wzwBDNhYAEKbxKslzLndKrJNTQWzKTkQIRbIHOVNu9po5hY1LfaW5d3NwlW8D1nCiiefCl3aT6T",
	"NHVrK3KVlNvJ2VdIjRXmDP4/XMD3HLQJDYUfRpHUAJ22rxNKmWFSEH7euh5YE0hUwOGaiHQ9nTNuQPX4",
	"4EHcE8hP4kbGvHUKBlJrduioVAGxOxAT1boLKExPvUImDpQhpN1XWDQYw8RCT69BaW9hBNf3EpcCmcPY",
	"3Vap7a6W7UkzAL2h+2eFurbrdo1EsdjAyv34s4I5nuA/jWpKGXk+GZ0XD3iBtdOJUmRdu6y9YVekqocM",
	"WQxKroz9SBa6lL/p88q/mTadJFAf1J2E1gZzos1UA4hO+HK2Yk4ihTnJucGT43ESrOtV/SNZfMooMd0k",
	"RsulnWqUTm0/V1NFsQPQaSqVgtTwtb0vcs7JjAOeGJVDEmAmVHvrILQU81pcDdh6Bz2H9doS0XVGhgRt",
	"o7iUmOAfrxbylb/6F3s5hHZMq38oJSN6QHm5n2eKZTGHWrgD7aFz2ry1E+obHJhJ3eQQL7bthK9aiqML",
	"cvMf0Jos4E4nuxtPUaM9H4XGktSwrkJlIK/5YzstuXpHTrwsl/ekRkFWfZlGt2R2Jb49dQl8ljtm6TA/",
	"ltac1knp0p4wdJ2xwdKywNh2ctw9LV26DUqr/+sf78pSWza2E3SXKj1mf8hXmTZEmZ6SM+U5hSnhCghd",
	"T0lRotJWligIl4JOFcuKc4o/L8EsQSEjkd8D+T1QuQeyR1Mf4SSC9K+lZtMMFJNtea/H29L+JW/Qiog1",
	"omStrcyFRDOSfkNMIMNWYC95sUfobI5sskjKK4hwHugST4tRme7RAyRsugN02ThVe5W4T9Qq9J7QBPeU",
	"s1vQrqvMQ1qELS8WlUmsWDisz+ooPQ5zZh8qDDFMG5ZGcEFyI6eG6G86zlgrInLCu1dsxaG1PGnu3uPv",
	"2s+7p7YDc5cX+QSZqpYclpeBg3rpPvBXT4MXTTSRUrovffRmiMt8psB6p5uCoj3YkA4J1uXOO8wMqqWN",
	"ju8q5mkNaa6YWV/aIBUqzYhm6UluliF1v7O3EMnNEoRhKbGX0Q0zS5RrUBZBiAiKMqL1jVQuu7p9LWTt",
	"ozWJL43J8MZqwMRchpIuU5kbxDQiyEjJ0Vwq5AtDsUBlj4tSKQwIY9OVlikjHK2AMnL0P8uAhhnLLX6v",
	"k/Mz3GBSfHw0Phpbv8oMBMkYnuDX7lKCM2KWzhUjkrGRz0Uucr4mttF0xp9RPMHnUpuTjPkpFC5CAdq8",
	"k9Q1FF5Jd26yjHu/jWzxXE/uhk7P1oxr0w655U93QWdS6CKOfx2P7016o0HYbLaLCGt/XZzoPE1B63nO",
	"uYPt23tUo+ikIiqcCWPxx5EGdQ0KgV9oT81qRdQaT8opISKuonA3XXyrfkOPOPO1XF+cK19o24A9ULij",
	"M40HCPpOxfZ2oxkSZBCQE2R9ieQc1e61z70ZH4eH/ZOwlCIVswXyzwQZa3jLgAhmqqlLHoNM3kaMa3gf",
	"GDHBKOmpuMJ394HnqwXIkAXypW/AG88LKTGbarg0M/4CIjh5DxYn5+WyxzjU5SBlr8NcGfLsAvQeTNFN",
	"NizopflWMO7/uFbu3+VwHu8lduuVAN2hXWE0Vh6Gmb5QGvkm+ufN9X93CiKCBNyUIQ+P4+jW/zqjmwLK",
	"HIr+q42IU3e9gYnz8jFXLNZvWL/cYmZVtAVkOUab4Kyxuh3ppOGLIEJXAQzehOetjEiheoxFex4S0qC5",
	"zMXPRqXWFFumeTVna3R2alXcgTqfKDLjh+GFeNgUGMXg+mVE2/FyGOqeaurxQ/1g7F/OQHYu0OKR7S6h",
	"nh0cCo+EiOij7hFV62k1+B7s3wL8nKp1NdB/vlgK3kk8VbfY8fnRXnWmG5UiI9EMkM7IjSiqyeeYzdQa",
	"Vdhs4PoV4pLQuKG9YD8A6L8syntQU7nzZfDnhyjUVC6KAZ1mGkmBJPcvEWus+Sn/qJgbj6oJ8lDPWkzm",
	"9UUx866fegymCWfte5FMw8Zn2842bRgM5ei2+r0ZEepe01VziV4q6Yhy9euE0ka/PMwtzRcUg9xSveQ4",
	"gFq6Pk846EVQc5t4+3x3YtKIUHrXsdgzJK4TShuzmf2grGAlr+H+0Hzh9vsN6HsGdBGmXwfSBYz2QfX0",
	"hpllieO7Jd7PzCzLGUIcuN9zUOugzCu/K3+0IcjvDL9vhre9cDDL1NU3LdvTzD7sVA+9lHlZ49OeiL/r",
	"u73Ds5dJQxZINUrclxSkgaPGRyAu7I3PP75c2dAVWxeYyBX3H29MRiMuU8KXUpvJ27+Nj/HmavNHAAAA",
	"//9xiWqJlTQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
