// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package oapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/nullable"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// AnalyzeRequest defines model for AnalyzeRequest.
type AnalyzeRequest struct {
	ExtractedProperties map[string]string `json:"extracted_properties"`
	RelevancyFilter     string            `json:"relevancy_filter"`
	Source              string            `json:"source"`
	SourceId            string            `json:"source_id"`
}

// Detection defines model for Detection.
type Detection struct {
	CreatedAt  string            `json:"created_at"`
	Id         int               `json:"id"`
	IsRelevant bool              `json:"is_relevant"`
	ProfileId  int               `json:"profile_id"`
	Properties map[string]string `json:"properties"`
	Source     string            `json:"source"`
	SourceId   string            `json:"source_id"`
}

// DetectionFilter defines model for DetectionFilter.
type DetectionFilter struct {
	IsRelevant *bool                `json:"is_relevant,omitempty"`
	Profiles   *[]int               `json:"profiles,omitempty"`
	Sources    *[]string            `json:"sources,omitempty"`
	Tags       *DetectionTagsFilter `json:"tags,omitempty"`
}

// DetectionListRequest defines model for DetectionListRequest.
type DetectionListRequest struct {
	Filter     *DetectionFilter `json:"filter,omitempty"`
	LastSeenId *int             `json:"last_seen_id,omitempty"`
	Limit      *int             `json:"limit,omitempty"`
}

// DetectionTagUpdateRequest defines model for DetectionTagUpdateRequest.
type DetectionTagUpdateRequest struct {
	DetectionId int `json:"detection_id"`
	Tags        struct {
		RelevancyDetectedCorrectly nullable.Nullable[bool] `json:"relevancy_detected_correctly,omitempty"`
	} `json:"tags"`
}

// DetectionTags defines model for DetectionTags.
type DetectionTags struct {
	RelevancyDetectedCorrectly *bool `json:"relevancy_detected_correctly,omitempty"`
}

// DetectionTagsFilter defines model for DetectionTagsFilter.
type DetectionTagsFilter struct {
	RelevancyDetectedCorrectly *[]*bool `json:"relevancy_detected_correctly,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// ListedDetection defines model for ListedDetection.
type ListedDetection struct {
	Detection  Detection               `json:"detection"`
	SourcePost *map[string]interface{} `json:"source_post,omitempty"`
	Tags       *DetectionTags          `json:"tags,omitempty"`
}

// Profile defines model for Profile.
type Profile struct {
	CreatedAt       *string                     `json:"created_at,omitempty"`
	DefaultSettings *ProfileSettings            `json:"default_settings,omitempty"`
	Id              int                         `json:"id"`
	Name            string                      `json:"name"`
	SourcesSettings *map[string]ProfileSettings `json:"sources_settings,omitempty"`
	UpdatedAt       *string                     `json:"updated_at,omitempty"`
}

// ProfileJumpstartRequest defines model for ProfileJumpstartRequest.
type ProfileJumpstartRequest struct {
	// JumpstartPeriod How many days to go back in time to analyze. If -1, analyze all posts.
	JumpstartPeriod *int `json:"jumpstart_period,omitempty"`

	// Limit How many posts to analyze. If -1, analyze all posts.
	Limit     *int `json:"limit,omitempty"`
	ProfileId int  `json:"profile_id"`
}

// ProfileSettings defines model for ProfileSettings.
type ProfileSettings struct {
	CreatedAt           *string           `json:"created_at,omitempty"`
	ExtractedProperties map[string]string `json:"extracted_properties"`
	RelevancyFilter     string            `json:"relevancy_filter"`
	UpdatedAt           *string           `json:"updated_at,omitempty"`
}

// ProfileSettingsUpdate defines model for ProfileSettingsUpdate.
type ProfileSettingsUpdate struct {
	ExtractedProperties *map[string]*string `json:"extracted_properties,omitempty"`
	RelevancyFilter     *string             `json:"relevancy_filter,omitempty"`
}

// ProfileUpdate defines model for ProfileUpdate.
type ProfileUpdate struct {
	DefaultSettings nullable.Nullable[ProfileSettingsUpdate] `json:"default_settings,omitempty"`
	Name            *string                                  `json:"name,omitempty"`
	SourcesSettings *map[string]*ProfileSettingsUpdate       `json:"sources_settings,omitempty"`
}

// SubredditSettings defines model for SubredditSettings.
type SubredditSettings struct {
	Profiles  []int  `json:"profiles"`
	Subreddit string `json:"subreddit"`
}

// PostApiSourcesRedditSubredditsSubredditAddProfilesJSONBody defines parameters for PostApiSourcesRedditSubredditsSubredditAddProfiles.
type PostApiSourcesRedditSubredditsSubredditAddProfilesJSONBody struct {
	ProfileIds []int `json:"profile_ids"`
}

// PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONBody defines parameters for PostApiSourcesRedditSubredditsSubredditRemoveProfiles.
type PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONBody struct {
	ProfileIds []int `json:"profile_ids"`
}

// GetApiSourcesRedditSubredditsWithProfileParams defines parameters for GetApiSourcesRedditSubredditsWithProfile.
type GetApiSourcesRedditSubredditsWithProfileParams struct {
	ProfileId int `form:"profile_id" json:"profile_id"`
}

// PostApiAnalyzeJSONRequestBody defines body for PostApiAnalyze for application/json ContentType.
type PostApiAnalyzeJSONRequestBody = AnalyzeRequest

// PostApiDetectionsListJSONRequestBody defines body for PostApiDetectionsList for application/json ContentType.
type PostApiDetectionsListJSONRequestBody = DetectionListRequest

// PutApiDetectionsTagsJSONRequestBody defines body for PutApiDetectionsTags for application/json ContentType.
type PutApiDetectionsTagsJSONRequestBody = DetectionTagUpdateRequest

// PostApiProfilesJSONRequestBody defines body for PostApiProfiles for application/json ContentType.
type PostApiProfilesJSONRequestBody = Profile

// PutApiProfilesIdJSONRequestBody defines body for PutApiProfilesId for application/json ContentType.
type PutApiProfilesIdJSONRequestBody = ProfileUpdate

// PostApiProfilesIdJumpstartJSONRequestBody defines body for PostApiProfilesIdJumpstart for application/json ContentType.
type PostApiProfilesIdJumpstartJSONRequestBody = ProfileJumpstartRequest

// PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody defines body for PostApiSourcesRedditSubredditsSubredditAddProfiles for application/json ContentType.
type PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody PostApiSourcesRedditSubredditsSubredditAddProfilesJSONBody

// PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody defines body for PostApiSourcesRedditSubredditsSubredditRemoveProfiles for application/json ContentType.
type PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiAnalyzeWithBody request with any body
	PostApiAnalyzeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAnalyze(ctx context.Context, body PostApiAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDetectionsListWithBody request with any body
	PostApiDetectionsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiDetectionsList(ctx context.Context, body PostApiDetectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiDetectionsTagsWithBody request with any body
	PutApiDetectionsTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiDetectionsTags(ctx context.Context, body PutApiDetectionsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProfiles request
	GetApiProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiProfilesWithBody request with any body
	PostApiProfilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiProfiles(ctx context.Context, body PostApiProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiProfilesId request
	DeleteApiProfilesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiProfilesId request
	GetApiProfilesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutApiProfilesIdWithBody request with any body
	PutApiProfilesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutApiProfilesId(ctx context.Context, id int, body PutApiProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiProfilesIdJumpstartWithBody request with any body
	PostApiProfilesIdJumpstartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiProfilesIdJumpstart(ctx context.Context, id int, body PostApiProfilesIdJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSourcesRedditSubreddits request
	GetApiSourcesRedditSubreddits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSourcesRedditSubredditsSubredditAddProfilesWithBody request with any body
	PostApiSourcesRedditSubredditsSubredditAddProfilesWithBody(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBody request with any body
	PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBody(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSourcesRedditSubredditsWithProfile request
	GetApiSourcesRedditSubredditsWithProfile(ctx context.Context, params *GetApiSourcesRedditSubredditsWithProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiAnalyzeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAnalyzeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAnalyze(ctx context.Context, body PostApiAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAnalyzeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDetectionsListWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDetectionsListRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDetectionsList(ctx context.Context, body PostApiDetectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDetectionsListRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDetectionsTagsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDetectionsTagsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiDetectionsTags(ctx context.Context, body PutApiDetectionsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiDetectionsTagsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProfiles(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProfilesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfilesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfiles(ctx context.Context, body PostApiProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiProfilesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiProfilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiProfilesId(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiProfilesIdRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiProfilesIdWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiProfilesIdRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutApiProfilesId(ctx context.Context, id int, body PutApiProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutApiProfilesIdRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfilesIdJumpstartWithBody(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesIdJumpstartRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiProfilesIdJumpstart(ctx context.Context, id int, body PostApiProfilesIdJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiProfilesIdJumpstartRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSourcesRedditSubreddits(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSourcesRedditSubredditsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSourcesRedditSubredditsSubredditAddProfilesWithBody(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequestWithBody(c.Server, subreddit, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequest(c.Server, subreddit, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBody(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestWithBody(c.Server, subreddit, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequest(c.Server, subreddit, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSourcesRedditSubredditsWithProfile(ctx context.Context, params *GetApiSourcesRedditSubredditsWithProfileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSourcesRedditSubredditsWithProfileRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiAnalyzeRequest calls the generic PostApiAnalyze builder with application/json body
func NewPostApiAnalyzeRequest(server string, body PostApiAnalyzeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAnalyzeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAnalyzeRequestWithBody generates requests for PostApiAnalyze with any type of body
func NewPostApiAnalyzeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/analyze")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiDetectionsListRequest calls the generic PostApiDetectionsList builder with application/json body
func NewPostApiDetectionsListRequest(server string, body PostApiDetectionsListJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiDetectionsListRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiDetectionsListRequestWithBody generates requests for PostApiDetectionsList with any type of body
func NewPostApiDetectionsListRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutApiDetectionsTagsRequest calls the generic PutApiDetectionsTags builder with application/json body
func NewPutApiDetectionsTagsRequest(server string, body PutApiDetectionsTagsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiDetectionsTagsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutApiDetectionsTagsRequestWithBody generates requests for PutApiDetectionsTags with any type of body
func NewPutApiDetectionsTagsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/detections/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiProfilesRequest generates requests for GetApiProfiles
func NewGetApiProfilesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiProfilesRequest calls the generic PostApiProfiles builder with application/json body
func NewPostApiProfilesRequest(server string, body PostApiProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiProfilesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiProfilesRequestWithBody generates requests for PostApiProfiles with any type of body
func NewPostApiProfilesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiProfilesIdRequest generates requests for DeleteApiProfilesId
func NewDeleteApiProfilesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiProfilesIdRequest generates requests for GetApiProfilesId
func NewGetApiProfilesIdRequest(server string, id int) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutApiProfilesIdRequest calls the generic PutApiProfilesId builder with application/json body
func NewPutApiProfilesIdRequest(server string, id int, body PutApiProfilesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutApiProfilesIdRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPutApiProfilesIdRequestWithBody generates requests for PutApiProfilesId with any type of body
func NewPutApiProfilesIdRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiProfilesIdJumpstartRequest calls the generic PostApiProfilesIdJumpstart builder with application/json body
func NewPostApiProfilesIdJumpstartRequest(server string, id int, body PostApiProfilesIdJumpstartJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiProfilesIdJumpstartRequestWithBody(server, id, "application/json", bodyReader)
}

// NewPostApiProfilesIdJumpstartRequestWithBody generates requests for PostApiProfilesIdJumpstart with any type of body
func NewPostApiProfilesIdJumpstartRequestWithBody(server string, id int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/profiles/%s/jumpstart", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSourcesRedditSubredditsRequest generates requests for GetApiSourcesRedditSubreddits
func NewGetApiSourcesRedditSubredditsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/reddit/subreddits")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequest calls the generic PostApiSourcesRedditSubredditsSubredditAddProfiles builder with application/json body
func NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequest(server string, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequestWithBody(server, subreddit, "application/json", bodyReader)
}

// NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequestWithBody generates requests for PostApiSourcesRedditSubredditsSubredditAddProfiles with any type of body
func NewPostApiSourcesRedditSubredditsSubredditAddProfilesRequestWithBody(server string, subreddit string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subreddit", runtime.ParamLocationPath, subreddit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/reddit/subreddits/%s/add_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequest calls the generic PostApiSourcesRedditSubredditsSubredditRemoveProfiles builder with application/json body
func NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequest(server string, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestWithBody(server, subreddit, "application/json", bodyReader)
}

// NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestWithBody generates requests for PostApiSourcesRedditSubredditsSubredditRemoveProfiles with any type of body
func NewPostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestWithBody(server string, subreddit string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subreddit", runtime.ParamLocationPath, subreddit)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/reddit/subreddits/%s/remove_profiles", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiSourcesRedditSubredditsWithProfileRequest generates requests for GetApiSourcesRedditSubredditsWithProfile
func NewGetApiSourcesRedditSubredditsWithProfileRequest(server string, params *GetApiSourcesRedditSubredditsWithProfileParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/sources/reddit/subreddits_with_profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "profile_id", runtime.ParamLocationQuery, params.ProfileId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiAnalyzeWithBodyWithResponse request with any body
	PostApiAnalyzeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAnalyzeResponse, error)

	PostApiAnalyzeWithResponse(ctx context.Context, body PostApiAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAnalyzeResponse, error)

	// PostApiDetectionsListWithBodyWithResponse request with any body
	PostApiDetectionsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDetectionsListResponse, error)

	PostApiDetectionsListWithResponse(ctx context.Context, body PostApiDetectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDetectionsListResponse, error)

	// PutApiDetectionsTagsWithBodyWithResponse request with any body
	PutApiDetectionsTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDetectionsTagsResponse, error)

	PutApiDetectionsTagsWithResponse(ctx context.Context, body PutApiDetectionsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDetectionsTagsResponse, error)

	// GetApiProfilesWithResponse request
	GetApiProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiProfilesResponse, error)

	// PostApiProfilesWithBodyWithResponse request with any body
	PostApiProfilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesResponse, error)

	PostApiProfilesWithResponse(ctx context.Context, body PostApiProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesResponse, error)

	// DeleteApiProfilesIdWithResponse request
	DeleteApiProfilesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiProfilesIdResponse, error)

	// GetApiProfilesIdWithResponse request
	GetApiProfilesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetApiProfilesIdResponse, error)

	// PutApiProfilesIdWithBodyWithResponse request with any body
	PutApiProfilesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiProfilesIdResponse, error)

	PutApiProfilesIdWithResponse(ctx context.Context, id int, body PutApiProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiProfilesIdResponse, error)

	// PostApiProfilesIdJumpstartWithBodyWithResponse request with any body
	PostApiProfilesIdJumpstartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesIdJumpstartResponse, error)

	PostApiProfilesIdJumpstartWithResponse(ctx context.Context, id int, body PostApiProfilesIdJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesIdJumpstartResponse, error)

	// GetApiSourcesRedditSubredditsWithResponse request
	GetApiSourcesRedditSubredditsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSourcesRedditSubredditsResponse, error)

	// PostApiSourcesRedditSubredditsSubredditAddProfilesWithBodyWithResponse request with any body
	PostApiSourcesRedditSubredditsSubredditAddProfilesWithBodyWithResponse(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error)

	PostApiSourcesRedditSubredditsSubredditAddProfilesWithResponse(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error)

	// PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBodyWithResponse request with any body
	PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBodyWithResponse(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error)

	PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithResponse(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error)

	// GetApiSourcesRedditSubredditsWithProfileWithResponse request
	GetApiSourcesRedditSubredditsWithProfileWithResponse(ctx context.Context, params *GetApiSourcesRedditSubredditsWithProfileParams, reqEditors ...RequestEditorFn) (*GetApiSourcesRedditSubredditsWithProfileResponse, error)
}

type PostApiAnalyzeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Detection
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiAnalyzeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAnalyzeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDetectionsListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ListedDetection
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiDetectionsListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDetectionsListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiDetectionsTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DetectionTags
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PutApiDetectionsTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiDetectionsTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Profile
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		Id int `json:"id"`
	}
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PostApiProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Profile
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutApiProfilesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PutApiProfilesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutApiProfilesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiProfilesIdJumpstartResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiProfilesIdJumpstartResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiProfilesIdJumpstartResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSourcesRedditSubredditsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SubredditSettings
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiSourcesRedditSubredditsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSourcesRedditSubredditsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSourcesRedditSubredditsSubredditAddProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiSourcesRedditSubredditsSubredditAddProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSourcesRedditSubredditsSubredditAddProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSourcesRedditSubredditsWithProfileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SubredditSettings
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetApiSourcesRedditSubredditsWithProfileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSourcesRedditSubredditsWithProfileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiAnalyzeWithBodyWithResponse request with arbitrary body returning *PostApiAnalyzeResponse
func (c *ClientWithResponses) PostApiAnalyzeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAnalyzeResponse, error) {
	rsp, err := c.PostApiAnalyzeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAnalyzeResponse(rsp)
}

func (c *ClientWithResponses) PostApiAnalyzeWithResponse(ctx context.Context, body PostApiAnalyzeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAnalyzeResponse, error) {
	rsp, err := c.PostApiAnalyze(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAnalyzeResponse(rsp)
}

// PostApiDetectionsListWithBodyWithResponse request with arbitrary body returning *PostApiDetectionsListResponse
func (c *ClientWithResponses) PostApiDetectionsListWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDetectionsListResponse, error) {
	rsp, err := c.PostApiDetectionsListWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDetectionsListResponse(rsp)
}

func (c *ClientWithResponses) PostApiDetectionsListWithResponse(ctx context.Context, body PostApiDetectionsListJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDetectionsListResponse, error) {
	rsp, err := c.PostApiDetectionsList(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDetectionsListResponse(rsp)
}

// PutApiDetectionsTagsWithBodyWithResponse request with arbitrary body returning *PutApiDetectionsTagsResponse
func (c *ClientWithResponses) PutApiDetectionsTagsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiDetectionsTagsResponse, error) {
	rsp, err := c.PutApiDetectionsTagsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDetectionsTagsResponse(rsp)
}

func (c *ClientWithResponses) PutApiDetectionsTagsWithResponse(ctx context.Context, body PutApiDetectionsTagsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiDetectionsTagsResponse, error) {
	rsp, err := c.PutApiDetectionsTags(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiDetectionsTagsResponse(rsp)
}

// GetApiProfilesWithResponse request returning *GetApiProfilesResponse
func (c *ClientWithResponses) GetApiProfilesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiProfilesResponse, error) {
	rsp, err := c.GetApiProfiles(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProfilesResponse(rsp)
}

// PostApiProfilesWithBodyWithResponse request with arbitrary body returning *PostApiProfilesResponse
func (c *ClientWithResponses) PostApiProfilesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesResponse, error) {
	rsp, err := c.PostApiProfilesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesResponse(rsp)
}

func (c *ClientWithResponses) PostApiProfilesWithResponse(ctx context.Context, body PostApiProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesResponse, error) {
	rsp, err := c.PostApiProfiles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesResponse(rsp)
}

// DeleteApiProfilesIdWithResponse request returning *DeleteApiProfilesIdResponse
func (c *ClientWithResponses) DeleteApiProfilesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*DeleteApiProfilesIdResponse, error) {
	rsp, err := c.DeleteApiProfilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiProfilesIdResponse(rsp)
}

// GetApiProfilesIdWithResponse request returning *GetApiProfilesIdResponse
func (c *ClientWithResponses) GetApiProfilesIdWithResponse(ctx context.Context, id int, reqEditors ...RequestEditorFn) (*GetApiProfilesIdResponse, error) {
	rsp, err := c.GetApiProfilesId(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiProfilesIdResponse(rsp)
}

// PutApiProfilesIdWithBodyWithResponse request with arbitrary body returning *PutApiProfilesIdResponse
func (c *ClientWithResponses) PutApiProfilesIdWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutApiProfilesIdResponse, error) {
	rsp, err := c.PutApiProfilesIdWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiProfilesIdResponse(rsp)
}

func (c *ClientWithResponses) PutApiProfilesIdWithResponse(ctx context.Context, id int, body PutApiProfilesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutApiProfilesIdResponse, error) {
	rsp, err := c.PutApiProfilesId(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutApiProfilesIdResponse(rsp)
}

// PostApiProfilesIdJumpstartWithBodyWithResponse request with arbitrary body returning *PostApiProfilesIdJumpstartResponse
func (c *ClientWithResponses) PostApiProfilesIdJumpstartWithBodyWithResponse(ctx context.Context, id int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiProfilesIdJumpstartResponse, error) {
	rsp, err := c.PostApiProfilesIdJumpstartWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesIdJumpstartResponse(rsp)
}

func (c *ClientWithResponses) PostApiProfilesIdJumpstartWithResponse(ctx context.Context, id int, body PostApiProfilesIdJumpstartJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiProfilesIdJumpstartResponse, error) {
	rsp, err := c.PostApiProfilesIdJumpstart(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiProfilesIdJumpstartResponse(rsp)
}

// GetApiSourcesRedditSubredditsWithResponse request returning *GetApiSourcesRedditSubredditsResponse
func (c *ClientWithResponses) GetApiSourcesRedditSubredditsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSourcesRedditSubredditsResponse, error) {
	rsp, err := c.GetApiSourcesRedditSubreddits(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSourcesRedditSubredditsResponse(rsp)
}

// PostApiSourcesRedditSubredditsSubredditAddProfilesWithBodyWithResponse request with arbitrary body returning *PostApiSourcesRedditSubredditsSubredditAddProfilesResponse
func (c *ClientWithResponses) PostApiSourcesRedditSubredditsSubredditAddProfilesWithBodyWithResponse(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error) {
	rsp, err := c.PostApiSourcesRedditSubredditsSubredditAddProfilesWithBody(ctx, subreddit, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSourcesRedditSubredditsSubredditAddProfilesResponse(rsp)
}

func (c *ClientWithResponses) PostApiSourcesRedditSubredditsSubredditAddProfilesWithResponse(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error) {
	rsp, err := c.PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx, subreddit, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSourcesRedditSubredditsSubredditAddProfilesResponse(rsp)
}

// PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBodyWithResponse request with arbitrary body returning *PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse
func (c *ClientWithResponses) PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBodyWithResponse(ctx context.Context, subreddit string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error) {
	rsp, err := c.PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithBody(ctx, subreddit, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(rsp)
}

func (c *ClientWithResponses) PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithResponse(ctx context.Context, subreddit string, body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error) {
	rsp, err := c.PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx, subreddit, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(rsp)
}

// GetApiSourcesRedditSubredditsWithProfileWithResponse request returning *GetApiSourcesRedditSubredditsWithProfileResponse
func (c *ClientWithResponses) GetApiSourcesRedditSubredditsWithProfileWithResponse(ctx context.Context, params *GetApiSourcesRedditSubredditsWithProfileParams, reqEditors ...RequestEditorFn) (*GetApiSourcesRedditSubredditsWithProfileResponse, error) {
	rsp, err := c.GetApiSourcesRedditSubredditsWithProfile(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSourcesRedditSubredditsWithProfileResponse(rsp)
}

// ParsePostApiAnalyzeResponse parses an HTTP response from a PostApiAnalyzeWithResponse call
func ParsePostApiAnalyzeResponse(rsp *http.Response) (*PostApiAnalyzeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAnalyzeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Detection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiDetectionsListResponse parses an HTTP response from a PostApiDetectionsListWithResponse call
func ParsePostApiDetectionsListResponse(rsp *http.Response) (*PostApiDetectionsListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDetectionsListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ListedDetection
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiDetectionsTagsResponse parses an HTTP response from a PutApiDetectionsTagsWithResponse call
func ParsePutApiDetectionsTagsResponse(rsp *http.Response) (*PutApiDetectionsTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiDetectionsTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DetectionTags
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiProfilesResponse parses an HTTP response from a GetApiProfilesWithResponse call
func ParseGetApiProfilesResponse(rsp *http.Response) (*GetApiProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiProfilesResponse parses an HTTP response from a PostApiProfilesWithResponse call
func ParsePostApiProfilesResponse(rsp *http.Response) (*PostApiProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			Id int `json:"id"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiProfilesIdResponse parses an HTTP response from a DeleteApiProfilesIdWithResponse call
func ParseDeleteApiProfilesIdResponse(rsp *http.Response) (*DeleteApiProfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiProfilesIdResponse parses an HTTP response from a GetApiProfilesIdWithResponse call
func ParseGetApiProfilesIdResponse(rsp *http.Response) (*GetApiProfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Profile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutApiProfilesIdResponse parses an HTTP response from a PutApiProfilesIdWithResponse call
func ParsePutApiProfilesIdResponse(rsp *http.Response) (*PutApiProfilesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutApiProfilesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiProfilesIdJumpstartResponse parses an HTTP response from a PostApiProfilesIdJumpstartWithResponse call
func ParsePostApiProfilesIdJumpstartResponse(rsp *http.Response) (*PostApiProfilesIdJumpstartResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiProfilesIdJumpstartResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiSourcesRedditSubredditsResponse parses an HTTP response from a GetApiSourcesRedditSubredditsWithResponse call
func ParseGetApiSourcesRedditSubredditsResponse(rsp *http.Response) (*GetApiSourcesRedditSubredditsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSourcesRedditSubredditsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubredditSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiSourcesRedditSubredditsSubredditAddProfilesResponse parses an HTTP response from a PostApiSourcesRedditSubredditsSubredditAddProfilesWithResponse call
func ParsePostApiSourcesRedditSubredditsSubredditAddProfilesResponse(rsp *http.Response) (*PostApiSourcesRedditSubredditsSubredditAddProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSourcesRedditSubredditsSubredditAddProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse parses an HTTP response from a PostApiSourcesRedditSubredditsSubredditRemoveProfilesWithResponse call
func ParsePostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(rsp *http.Response) (*PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiSourcesRedditSubredditsWithProfileResponse parses an HTTP response from a GetApiSourcesRedditSubredditsWithProfileWithResponse call
func ParseGetApiSourcesRedditSubredditsWithProfileResponse(rsp *http.Response) (*GetApiSourcesRedditSubredditsWithProfileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSourcesRedditSubredditsWithProfileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SubredditSettings
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Analyze a post
	// (POST /api/analyze)
	PostApiAnalyze(c *gin.Context)
	// List detections
	// (POST /api/detections/list)
	PostApiDetectionsList(c *gin.Context)
	// Detection tag update
	// (PUT /api/detections/tags)
	PutApiDetectionsTags(c *gin.Context)
	// Get all profiles
	// (GET /api/profiles)
	GetApiProfiles(c *gin.Context)
	// Create a new profile
	// (POST /api/profiles)
	PostApiProfiles(c *gin.Context)
	// Delete a profile by ID
	// (DELETE /api/profiles/{id})
	DeleteApiProfilesId(c *gin.Context, id int)
	// Get a profile by ID
	// (GET /api/profiles/{id})
	GetApiProfilesId(c *gin.Context, id int)
	// Update a profile by ID
	// (PUT /api/profiles/{id})
	PutApiProfilesId(c *gin.Context, id int)
	// Jumpstart a profile - run analysis on old posts
	// (POST /api/profiles/{id}/jumpstart)
	PostApiProfilesIdJumpstart(c *gin.Context, id int)
	// Get all subreddits
	// (GET /api/sources/reddit/subreddits)
	GetApiSourcesRedditSubreddits(c *gin.Context)
	// Add profiles
	// (POST /api/sources/reddit/subreddits/{subreddit}/add_profiles)
	PostApiSourcesRedditSubredditsSubredditAddProfiles(c *gin.Context, subreddit string)
	// Remove profiles
	// (POST /api/sources/reddit/subreddits/{subreddit}/remove_profiles)
	PostApiSourcesRedditSubredditsSubredditRemoveProfiles(c *gin.Context, subreddit string)
	// Get all subreddits by profile
	// (GET /api/sources/reddit/subreddits_with_profile)
	GetApiSourcesRedditSubredditsWithProfile(c *gin.Context, params GetApiSourcesRedditSubredditsWithProfileParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// PostApiAnalyze operation middleware
func (siw *ServerInterfaceWrapper) PostApiAnalyze(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiAnalyze(c)
}

// PostApiDetectionsList operation middleware
func (siw *ServerInterfaceWrapper) PostApiDetectionsList(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiDetectionsList(c)
}

// PutApiDetectionsTags operation middleware
func (siw *ServerInterfaceWrapper) PutApiDetectionsTags(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiDetectionsTags(c)
}

// GetApiProfiles operation middleware
func (siw *ServerInterfaceWrapper) GetApiProfiles(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiProfiles(c)
}

// PostApiProfiles operation middleware
func (siw *ServerInterfaceWrapper) PostApiProfiles(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiProfiles(c)
}

// DeleteApiProfilesId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiProfilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiProfilesId(c, id)
}

// GetApiProfilesId operation middleware
func (siw *ServerInterfaceWrapper) GetApiProfilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiProfilesId(c, id)
}

// PutApiProfilesId operation middleware
func (siw *ServerInterfaceWrapper) PutApiProfilesId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutApiProfilesId(c, id)
}

// PostApiProfilesIdJumpstart operation middleware
func (siw *ServerInterfaceWrapper) PostApiProfilesIdJumpstart(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiProfilesIdJumpstart(c, id)
}

// GetApiSourcesRedditSubreddits operation middleware
func (siw *ServerInterfaceWrapper) GetApiSourcesRedditSubreddits(c *gin.Context) {

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiSourcesRedditSubreddits(c)
}

// PostApiSourcesRedditSubredditsSubredditAddProfiles operation middleware
func (siw *ServerInterfaceWrapper) PostApiSourcesRedditSubredditsSubredditAddProfiles(c *gin.Context) {

	var err error

	// ------------- Path parameter "subreddit" -------------
	var subreddit string

	err = runtime.BindStyledParameterWithOptions("simple", "subreddit", c.Param("subreddit"), &subreddit, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subreddit: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiSourcesRedditSubredditsSubredditAddProfiles(c, subreddit)
}

// PostApiSourcesRedditSubredditsSubredditRemoveProfiles operation middleware
func (siw *ServerInterfaceWrapper) PostApiSourcesRedditSubredditsSubredditRemoveProfiles(c *gin.Context) {

	var err error

	// ------------- Path parameter "subreddit" -------------
	var subreddit string

	err = runtime.BindStyledParameterWithOptions("simple", "subreddit", c.Param("subreddit"), &subreddit, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subreddit: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BasicAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiSourcesRedditSubredditsSubredditRemoveProfiles(c, subreddit)
}

// GetApiSourcesRedditSubredditsWithProfile operation middleware
func (siw *ServerInterfaceWrapper) GetApiSourcesRedditSubredditsWithProfile(c *gin.Context) {

	var err error

	c.Set(BasicAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiSourcesRedditSubredditsWithProfileParams

	// ------------- Required query parameter "profile_id" -------------

	if paramValue := c.Query("profile_id"); paramValue != "" {

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Query argument profile_id is required, but not found"), http.StatusBadRequest)
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "profile_id", c.Request.URL.Query(), &params.ProfileId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter profile_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiSourcesRedditSubredditsWithProfile(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/api/analyze", wrapper.PostApiAnalyze)
	router.POST(options.BaseURL+"/api/detections/list", wrapper.PostApiDetectionsList)
	router.PUT(options.BaseURL+"/api/detections/tags", wrapper.PutApiDetectionsTags)
	router.GET(options.BaseURL+"/api/profiles", wrapper.GetApiProfiles)
	router.POST(options.BaseURL+"/api/profiles", wrapper.PostApiProfiles)
	router.DELETE(options.BaseURL+"/api/profiles/:id", wrapper.DeleteApiProfilesId)
	router.GET(options.BaseURL+"/api/profiles/:id", wrapper.GetApiProfilesId)
	router.PUT(options.BaseURL+"/api/profiles/:id", wrapper.PutApiProfilesId)
	router.POST(options.BaseURL+"/api/profiles/:id/jumpstart", wrapper.PostApiProfilesIdJumpstart)
	router.GET(options.BaseURL+"/api/sources/reddit/subreddits", wrapper.GetApiSourcesRedditSubreddits)
	router.POST(options.BaseURL+"/api/sources/reddit/subreddits/:subreddit/add_profiles", wrapper.PostApiSourcesRedditSubredditsSubredditAddProfiles)
	router.POST(options.BaseURL+"/api/sources/reddit/subreddits/:subreddit/remove_profiles", wrapper.PostApiSourcesRedditSubredditsSubredditRemoveProfiles)
	router.GET(options.BaseURL+"/api/sources/reddit/subreddits_with_profile", wrapper.GetApiSourcesRedditSubredditsWithProfile)
}

type PostApiAnalyzeRequestObject struct {
	Body *PostApiAnalyzeJSONRequestBody
}

type PostApiAnalyzeResponseObject interface {
	VisitPostApiAnalyzeResponse(w http.ResponseWriter) error
}

type PostApiAnalyze200JSONResponse Detection

func (response PostApiAnalyze200JSONResponse) VisitPostApiAnalyzeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiAnalyze500JSONResponse Error

func (response PostApiAnalyze500JSONResponse) VisitPostApiAnalyzeResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiDetectionsListRequestObject struct {
	Body *PostApiDetectionsListJSONRequestBody
}

type PostApiDetectionsListResponseObject interface {
	VisitPostApiDetectionsListResponse(w http.ResponseWriter) error
}

type PostApiDetectionsList200JSONResponse []ListedDetection

func (response PostApiDetectionsList200JSONResponse) VisitPostApiDetectionsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiDetectionsList401Response struct {
}

func (response PostApiDetectionsList401Response) VisitPostApiDetectionsListResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiDetectionsList500JSONResponse Error

func (response PostApiDetectionsList500JSONResponse) VisitPostApiDetectionsListResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutApiDetectionsTagsRequestObject struct {
	Body *PutApiDetectionsTagsJSONRequestBody
}

type PutApiDetectionsTagsResponseObject interface {
	VisitPutApiDetectionsTagsResponse(w http.ResponseWriter) error
}

type PutApiDetectionsTags200JSONResponse DetectionTags

func (response PutApiDetectionsTags200JSONResponse) VisitPutApiDetectionsTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiDetectionsTags401Response struct {
}

func (response PutApiDetectionsTags401Response) VisitPutApiDetectionsTagsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PutApiDetectionsTags500JSONResponse Error

func (response PutApiDetectionsTags500JSONResponse) VisitPutApiDetectionsTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfilesRequestObject struct {
}

type GetApiProfilesResponseObject interface {
	VisitGetApiProfilesResponse(w http.ResponseWriter) error
}

type GetApiProfiles200JSONResponse []Profile

func (response GetApiProfiles200JSONResponse) VisitGetApiProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfiles401Response struct {
}

func (response GetApiProfiles401Response) VisitGetApiProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiProfiles500JSONResponse Error

func (response GetApiProfiles500JSONResponse) VisitGetApiProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfilesRequestObject struct {
	Body *PostApiProfilesJSONRequestBody
}

type PostApiProfilesResponseObject interface {
	VisitPostApiProfilesResponse(w http.ResponseWriter) error
}

type PostApiProfiles201JSONResponse struct {
	Id int `json:"id"`
}

func (response PostApiProfiles201JSONResponse) VisitPostApiProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfiles500JSONResponse Error

func (response PostApiProfiles500JSONResponse) VisitPostApiProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiProfilesIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteApiProfilesIdResponseObject interface {
	VisitDeleteApiProfilesIdResponse(w http.ResponseWriter) error
}

type DeleteApiProfilesId204Response struct {
}

func (response DeleteApiProfilesId204Response) VisitDeleteApiProfilesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiProfilesId404Response struct {
}

func (response DeleteApiProfilesId404Response) VisitDeleteApiProfilesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteApiProfilesId500JSONResponse Error

func (response DeleteApiProfilesId500JSONResponse) VisitDeleteApiProfilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfilesIdRequestObject struct {
	Id int `json:"id"`
}

type GetApiProfilesIdResponseObject interface {
	VisitGetApiProfilesIdResponse(w http.ResponseWriter) error
}

type GetApiProfilesId200JSONResponse Profile

func (response GetApiProfilesId200JSONResponse) VisitGetApiProfilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiProfilesId404Response struct {
}

func (response GetApiProfilesId404Response) VisitGetApiProfilesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetApiProfilesId500JSONResponse Error

func (response GetApiProfilesId500JSONResponse) VisitGetApiProfilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutApiProfilesIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutApiProfilesIdJSONRequestBody
}

type PutApiProfilesIdResponseObject interface {
	VisitPutApiProfilesIdResponse(w http.ResponseWriter) error
}

type PutApiProfilesId200Response struct {
}

func (response PutApiProfilesId200Response) VisitPutApiProfilesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type PutApiProfilesId404Response struct {
}

func (response PutApiProfilesId404Response) VisitPutApiProfilesIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PutApiProfilesId500JSONResponse Error

func (response PutApiProfilesId500JSONResponse) VisitPutApiProfilesIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiProfilesIdJumpstartRequestObject struct {
	Id   int `json:"id"`
	Body *PostApiProfilesIdJumpstartJSONRequestBody
}

type PostApiProfilesIdJumpstartResponseObject interface {
	VisitPostApiProfilesIdJumpstartResponse(w http.ResponseWriter) error
}

type PostApiProfilesIdJumpstart204Response struct {
}

func (response PostApiProfilesIdJumpstart204Response) VisitPostApiProfilesIdJumpstartResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostApiProfilesIdJumpstart404Response struct {
}

func (response PostApiProfilesIdJumpstart404Response) VisitPostApiProfilesIdJumpstartResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiProfilesIdJumpstart500JSONResponse Error

func (response PostApiProfilesIdJumpstart500JSONResponse) VisitPostApiProfilesIdJumpstartResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSourcesRedditSubredditsRequestObject struct {
}

type GetApiSourcesRedditSubredditsResponseObject interface {
	VisitGetApiSourcesRedditSubredditsResponse(w http.ResponseWriter) error
}

type GetApiSourcesRedditSubreddits200JSONResponse []SubredditSettings

func (response GetApiSourcesRedditSubreddits200JSONResponse) VisitGetApiSourcesRedditSubredditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSourcesRedditSubreddits401Response struct {
}

func (response GetApiSourcesRedditSubreddits401Response) VisitGetApiSourcesRedditSubredditsResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiSourcesRedditSubreddits500JSONResponse Error

func (response GetApiSourcesRedditSubreddits500JSONResponse) VisitGetApiSourcesRedditSubredditsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSourcesRedditSubredditsSubredditAddProfilesRequestObject struct {
	Subreddit string `json:"subreddit"`
	Body      *PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody
}

type PostApiSourcesRedditSubredditsSubredditAddProfilesResponseObject interface {
	VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error
}

type PostApiSourcesRedditSubredditsSubredditAddProfiles204Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditAddProfiles204Response) VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditAddProfiles401Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditAddProfiles401Response) VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditAddProfiles404Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditAddProfiles404Response) VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditAddProfiles500JSONResponse Error

func (response PostApiSourcesRedditSubredditsSubredditAddProfiles500JSONResponse) VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestObject struct {
	Subreddit string `json:"subreddit"`
	Body      *PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponseObject interface {
	VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfiles204Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditRemoveProfiles204Response) VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfiles401Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditRemoveProfiles401Response) VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfiles404Response struct {
}

func (response PostApiSourcesRedditSubredditsSubredditRemoveProfiles404Response) VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PostApiSourcesRedditSubredditsSubredditRemoveProfiles500JSONResponse Error

func (response PostApiSourcesRedditSubredditsSubredditRemoveProfiles500JSONResponse) VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSourcesRedditSubredditsWithProfileRequestObject struct {
	Params GetApiSourcesRedditSubredditsWithProfileParams
}

type GetApiSourcesRedditSubredditsWithProfileResponseObject interface {
	VisitGetApiSourcesRedditSubredditsWithProfileResponse(w http.ResponseWriter) error
}

type GetApiSourcesRedditSubredditsWithProfile200JSONResponse []SubredditSettings

func (response GetApiSourcesRedditSubredditsWithProfile200JSONResponse) VisitGetApiSourcesRedditSubredditsWithProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSourcesRedditSubredditsWithProfile401Response struct {
}

func (response GetApiSourcesRedditSubredditsWithProfile401Response) VisitGetApiSourcesRedditSubredditsWithProfileResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetApiSourcesRedditSubredditsWithProfile500JSONResponse Error

func (response GetApiSourcesRedditSubredditsWithProfile500JSONResponse) VisitGetApiSourcesRedditSubredditsWithProfileResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Analyze a post
	// (POST /api/analyze)
	PostApiAnalyze(ctx context.Context, request PostApiAnalyzeRequestObject) (PostApiAnalyzeResponseObject, error)
	// List detections
	// (POST /api/detections/list)
	PostApiDetectionsList(ctx context.Context, request PostApiDetectionsListRequestObject) (PostApiDetectionsListResponseObject, error)
	// Detection tag update
	// (PUT /api/detections/tags)
	PutApiDetectionsTags(ctx context.Context, request PutApiDetectionsTagsRequestObject) (PutApiDetectionsTagsResponseObject, error)
	// Get all profiles
	// (GET /api/profiles)
	GetApiProfiles(ctx context.Context, request GetApiProfilesRequestObject) (GetApiProfilesResponseObject, error)
	// Create a new profile
	// (POST /api/profiles)
	PostApiProfiles(ctx context.Context, request PostApiProfilesRequestObject) (PostApiProfilesResponseObject, error)
	// Delete a profile by ID
	// (DELETE /api/profiles/{id})
	DeleteApiProfilesId(ctx context.Context, request DeleteApiProfilesIdRequestObject) (DeleteApiProfilesIdResponseObject, error)
	// Get a profile by ID
	// (GET /api/profiles/{id})
	GetApiProfilesId(ctx context.Context, request GetApiProfilesIdRequestObject) (GetApiProfilesIdResponseObject, error)
	// Update a profile by ID
	// (PUT /api/profiles/{id})
	PutApiProfilesId(ctx context.Context, request PutApiProfilesIdRequestObject) (PutApiProfilesIdResponseObject, error)
	// Jumpstart a profile - run analysis on old posts
	// (POST /api/profiles/{id}/jumpstart)
	PostApiProfilesIdJumpstart(ctx context.Context, request PostApiProfilesIdJumpstartRequestObject) (PostApiProfilesIdJumpstartResponseObject, error)
	// Get all subreddits
	// (GET /api/sources/reddit/subreddits)
	GetApiSourcesRedditSubreddits(ctx context.Context, request GetApiSourcesRedditSubredditsRequestObject) (GetApiSourcesRedditSubredditsResponseObject, error)
	// Add profiles
	// (POST /api/sources/reddit/subreddits/{subreddit}/add_profiles)
	PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx context.Context, request PostApiSourcesRedditSubredditsSubredditAddProfilesRequestObject) (PostApiSourcesRedditSubredditsSubredditAddProfilesResponseObject, error)
	// Remove profiles
	// (POST /api/sources/reddit/subreddits/{subreddit}/remove_profiles)
	PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx context.Context, request PostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestObject) (PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponseObject, error)
	// Get all subreddits by profile
	// (GET /api/sources/reddit/subreddits_with_profile)
	GetApiSourcesRedditSubredditsWithProfile(ctx context.Context, request GetApiSourcesRedditSubredditsWithProfileRequestObject) (GetApiSourcesRedditSubredditsWithProfileResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostApiAnalyze operation middleware
func (sh *strictHandler) PostApiAnalyze(ctx *gin.Context) {
	var request PostApiAnalyzeRequestObject

	var body PostApiAnalyzeJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiAnalyze(ctx, request.(PostApiAnalyzeRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiAnalyze")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiAnalyzeResponseObject); ok {
		if err := validResponse.VisitPostApiAnalyzeResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiDetectionsList operation middleware
func (sh *strictHandler) PostApiDetectionsList(ctx *gin.Context) {
	var request PostApiDetectionsListRequestObject

	var body PostApiDetectionsListJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiDetectionsList(ctx, request.(PostApiDetectionsListRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiDetectionsList")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiDetectionsListResponseObject); ok {
		if err := validResponse.VisitPostApiDetectionsListResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiDetectionsTags operation middleware
func (sh *strictHandler) PutApiDetectionsTags(ctx *gin.Context) {
	var request PutApiDetectionsTagsRequestObject

	var body PutApiDetectionsTagsJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiDetectionsTags(ctx, request.(PutApiDetectionsTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiDetectionsTags")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiDetectionsTagsResponseObject); ok {
		if err := validResponse.VisitPutApiDetectionsTagsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiProfiles operation middleware
func (sh *strictHandler) GetApiProfiles(ctx *gin.Context) {
	var request GetApiProfilesRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiProfiles(ctx, request.(GetApiProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiProfiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiProfilesResponseObject); ok {
		if err := validResponse.VisitGetApiProfilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiProfiles operation middleware
func (sh *strictHandler) PostApiProfiles(ctx *gin.Context) {
	var request PostApiProfilesRequestObject

	var body PostApiProfilesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiProfiles(ctx, request.(PostApiProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiProfiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiProfilesResponseObject); ok {
		if err := validResponse.VisitPostApiProfilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiProfilesId operation middleware
func (sh *strictHandler) DeleteApiProfilesId(ctx *gin.Context, id int) {
	var request DeleteApiProfilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiProfilesId(ctx, request.(DeleteApiProfilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiProfilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(DeleteApiProfilesIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiProfilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiProfilesId operation middleware
func (sh *strictHandler) GetApiProfilesId(ctx *gin.Context, id int) {
	var request GetApiProfilesIdRequestObject

	request.Id = id

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiProfilesId(ctx, request.(GetApiProfilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiProfilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiProfilesIdResponseObject); ok {
		if err := validResponse.VisitGetApiProfilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiProfilesId operation middleware
func (sh *strictHandler) PutApiProfilesId(ctx *gin.Context, id int) {
	var request PutApiProfilesIdRequestObject

	request.Id = id

	var body PutApiProfilesIdJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiProfilesId(ctx, request.(PutApiProfilesIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiProfilesId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PutApiProfilesIdResponseObject); ok {
		if err := validResponse.VisitPutApiProfilesIdResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiProfilesIdJumpstart operation middleware
func (sh *strictHandler) PostApiProfilesIdJumpstart(ctx *gin.Context, id int) {
	var request PostApiProfilesIdJumpstartRequestObject

	request.Id = id

	var body PostApiProfilesIdJumpstartJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiProfilesIdJumpstart(ctx, request.(PostApiProfilesIdJumpstartRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiProfilesIdJumpstart")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiProfilesIdJumpstartResponseObject); ok {
		if err := validResponse.VisitPostApiProfilesIdJumpstartResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiSourcesRedditSubreddits operation middleware
func (sh *strictHandler) GetApiSourcesRedditSubreddits(ctx *gin.Context) {
	var request GetApiSourcesRedditSubredditsRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSourcesRedditSubreddits(ctx, request.(GetApiSourcesRedditSubredditsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSourcesRedditSubreddits")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiSourcesRedditSubredditsResponseObject); ok {
		if err := validResponse.VisitGetApiSourcesRedditSubredditsResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSourcesRedditSubredditsSubredditAddProfiles operation middleware
func (sh *strictHandler) PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx *gin.Context, subreddit string) {
	var request PostApiSourcesRedditSubredditsSubredditAddProfilesRequestObject

	request.Subreddit = subreddit

	var body PostApiSourcesRedditSubredditsSubredditAddProfilesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSourcesRedditSubredditsSubredditAddProfiles(ctx, request.(PostApiSourcesRedditSubredditsSubredditAddProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSourcesRedditSubredditsSubredditAddProfiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiSourcesRedditSubredditsSubredditAddProfilesResponseObject); ok {
		if err := validResponse.VisitPostApiSourcesRedditSubredditsSubredditAddProfilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSourcesRedditSubredditsSubredditRemoveProfiles operation middleware
func (sh *strictHandler) PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx *gin.Context, subreddit string) {
	var request PostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestObject

	request.Subreddit = subreddit

	var body PostApiSourcesRedditSubredditsSubredditRemoveProfilesJSONRequestBody
	if err := ctx.ShouldBindJSON(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSourcesRedditSubredditsSubredditRemoveProfiles(ctx, request.(PostApiSourcesRedditSubredditsSubredditRemoveProfilesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSourcesRedditSubredditsSubredditRemoveProfiles")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(PostApiSourcesRedditSubredditsSubredditRemoveProfilesResponseObject); ok {
		if err := validResponse.VisitPostApiSourcesRedditSubredditsSubredditRemoveProfilesResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiSourcesRedditSubredditsWithProfile operation middleware
func (sh *strictHandler) GetApiSourcesRedditSubredditsWithProfile(ctx *gin.Context, params GetApiSourcesRedditSubredditsWithProfileParams) {
	var request GetApiSourcesRedditSubredditsWithProfileRequestObject

	request.Params = params

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSourcesRedditSubredditsWithProfile(ctx, request.(GetApiSourcesRedditSubredditsWithProfileRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSourcesRedditSubredditsWithProfile")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetApiSourcesRedditSubredditsWithProfileResponseObject); ok {
		if err := validResponse.VisitGetApiSourcesRedditSubredditsWithProfileResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaSXPbNhT+Kxi0p45syk3Sg25K06bu9OCJk+kh9Wgg4klCCgIMANpRPPrvHQBcQBGk",
	"JFt24jQ3GdvbvrfStziVWS4FCKPx5BbrdAUZcT+ngvD1Z3gDHwvQxq7kSuagDAO3D5+MIqkBOmuvE0qZ",
	"YVIQftFaN+sc8ARro5hY4s2oWpDzD5Aau6CAwzUR6Xq2YNyAit7SslApDGzNGI3suuc/FkwBxZP31Svh",
	"nQj9UVzIqwjvr8BAasXuKipVQOwLxES5brHLhIElKLeuZyVD4b25lByIsAdyJReMb8kbPHAssxxH407D",
	"UbUHcrSlbokwCvU4aIHfa/C0NbCvQv1hA5mO67VcIUqRdaOE6K2OVutLhizdwR8VLPAE/5A0fpiUTpjU",
	"Er0lS11KtdkMif4X06bXYRun2otoRXCEOdFmpgFEL9Q4y5ijSGFBCm7w5Gw86pwbZP0tWb7LKTH9AYdW",
	"R3vZqJTavte4tX8B6CyVSkFq+Nrui4JzMueAJ0YVMOoAo8v2FrRbjJVcXO2Q9Q587uZri0SfI+witI3i",
	"iuIIfzpZypNy9Se73IV2jKvflJIRPqBaHo4c/lhMoRbuQAdCLw239kJ9ENVyqcNA0ZA92Hf7ERMV68LH",
	"oYMzSel8Mw3GMLGbx5LOZXV8IBkJkg1lAN2i2ZdqDuSlo5fCxYce8WPpxnE9oOE/iyzXhqj+mPmhOjHL",
	"QTFJWzHu2djqXKeK5R5j+A95gzIi1oiStUZGoqVEc5L+i5hAhmVgl4ivq07R+QKdnI2qvxHhHFnI6VM8",
	"2ivEnpz1knfv3IPYcGmxperg8ICuLwOAHITqL1RnHgK2+xSOW+rxOTCWlu5XffckuftpadMvTyPHdkS+",
	"V4wqn/0CEamh3C0GOkq4LOYKLM1+1N+12Kxe3qPHqY8Gpe1VjH8NaaGYWV9a0T1Lc6JZOi3MyhstjDIv",
	"7RYihVmBMCwldhndMLNChQZl7YKIoCgnWt9I5cp+966tJOzVJuKsjMnxxnLAxEJ2KV2msjCIaUSQkZKj",
	"hVSoTJ1iiapiHqVSGBDGBlktU0Y4yoAycvqPLVkMMxb15VvTi3M8wtegtKdwdjo+HVu9yhwEyRme4Gdu",
	"aYRzYlZOFQnJWVIGTme5si6w1nTCn1M8wRdSm2nOyq4Ze1OANi8ldUVVyaRDY57zUm/JB+2LE4+6XZjc",
	"6sk3bZNbz3YLOpdCezv+PB4fjXpQJG0227nHyl+lF4p0kaag9aLg3MH2xRHZ8NVkhIVzYSz+ONKgrkEh",
	"KA9ar8kyotZ4Uk01EHHpz206+9YVmU44KyuBITvXutC2CH0gc0f7ugcweh1/hpjZLra7lX/HIFNkdYnk",
	"AjXqtfeej8+6zv5O2JAiFfsM9KuCjBW8JUAEM3XnWcQgU7QR41qCB0ZMp53+UrGi7H86mq8PIEOWqKy2",
	"OnHjaSElJlMDlzDjLyGCk9dgcXJRHXsMp65azYOcuRbkyRnoNRjf+gQSDIb5ljGO7661+vdxzrODyG7N",
	"Pvdp5KINXCTTe6ZR2bd9vbn+V8cgIkjATWXyrjsmt4xuPIY5+JalDYVXbj0Aw7mbWhNFMjCgNJ68v8XM",
	"MmVLxmrsMMHlN4XQqKNA7I4xrjoWf951rUr5ntlYwBy4JKRBC1mIry1qWlFsRVayOV+j81eWxT2i5KPZ",
	"YvwwTh83lAKjGFx/G/Z1Qbdr3IFS6TGM+2DBvBoU7F1vxW3ZXxE9OQB4jXQxEI3EST1y3dmDNTCpB7lP",
	"EC+dIfReyBkAQa3AbwM9tX4CAJ0gVQg/bdBMIymQ5NQPtBtYlYPAxA/BknoctqsAv/T33vgBXnPrMerx",
	"7uDwoMo8kPHJ1uahDDtNmdzWvzcJoW4aXjdZg8Gjx8r1rymlQfG/O6iE09adsaWe2N4jtETHyTNGD5so",
	"937L0T29wN0Dk0aE0rv2+E8wcE0pDRrNw6CsIJPXcDw0v3HvfQf0kQHtzfT/gbSH0SGont0ws6pwfLfE",
	"+zczq6pnigP3YwFq3SC39Q9lj9j0fc/wh2Z42wnkYTtcfYl0tg2+Qb6/stbxb3vDF4qXXxAnScJlSvhK",
	"ajN58cv4DG+uNv8FAAD//1oFXXzZKgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
